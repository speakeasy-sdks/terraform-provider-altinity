// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"altinity/internal/sdk"
	"altinity/internal/sdk/pkg/models/operations"
	"context"
	"fmt"

	"altinity/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ClickhouseClusterResource{}
var _ resource.ResourceWithImportState = &ClickhouseClusterResource{}

func NewClickhouseClusterResource() resource.Resource {
	return &ClickhouseClusterResource{}
}

// ClickhouseClusterResource defines the resource implementation.
type ClickhouseClusterResource struct {
	client *sdk.SDK
}

// ClickhouseClusterResourceModel describes the resource data model.
type ClickhouseClusterResourceModel struct {
	AdminPass            types.String                                    `tfsdk:"admin_pass"`
	AdminUser            types.String                                    `tfsdk:"admin_user"`
	AlertsSettings       ClickhouseClusterResponseAlertsSettings         `tfsdk:"alerts_settings"`
	AlternateEndpoints   []types.String                                  `tfsdk:"alternate_endpoints"`
	AltinitySupport      types.String                                    `tfsdk:"altinity_support"`
	Azlist               []types.String                                  `tfsdk:"azlist"`
	BackupOptions        ClickhouseClusterResponseBackupOptions          `tfsdk:"backup_options"`
	CanPublish           types.Bool                                      `tfsdk:"can_publish"`
	CanRescale           types.Bool                                      `tfsdk:"can_rescale"`
	ClusterMonitoringURL types.String                                    `tfsdk:"cluster_monitoring_url"`
	DatadogSettings      ClickhouseClusterResponseDatadogSettings        `tfsdk:"datadog_settings"`
	Disks                types.Int64                                     `tfsdk:"disks"`
	DomainName           types.String                                    `tfsdk:"domain_name"`
	Environment          ClickhouseClusterResponseEnvironment            `tfsdk:"environment"`
	HasChanges           types.Bool                                      `tfsdk:"has_changes"`
	HasMigration         types.Bool                                      `tfsdk:"has_migration"`
	Host                 types.String                                    `tfsdk:"host"`
	HTTPPort             types.Int64                                     `tfsdk:"http_port"`
	ID                   types.String                                    `tfsdk:"id"`
	IDEnvironment        types.String                                    `tfsdk:"id_environment"`
	IDOwner              types.String                                    `tfsdk:"id_owner"`
	InitialAction        ClickhouseClusterResponseInitialAction          `tfsdk:"initial_action"`
	InternalDomainName   types.String                                    `tfsdk:"internal_domain_name"`
	InternalName         types.String                                    `tfsdk:"internal_name"`
	IPWhitelist          types.String                                    `tfsdk:"ip_whitelist"`
	Layouts              ClickhouseClusterResponseLayouts                `tfsdk:"layouts"`
	LbType               types.String                                    `tfsdk:"lb_type"`
	LogsMonitoringURL    types.String                                    `tfsdk:"logs_monitoring_url"`
	MigrationProgress    types.Int64                                     `tfsdk:"migration_progress"`
	MysqlProtocol        types.Bool                                      `tfsdk:"mysql_protocol"`
	Name                 types.String                                    `tfsdk:"name"`
	Nodes                types.Int64                                     `tfsdk:"nodes"`
	NodeType             types.String                                    `tfsdk:"node_type"`
	NormalizedName       types.String                                    `tfsdk:"normalized_name"`
	Options              ClickhouseClusterResponseOptions                `tfsdk:"options"`
	Owner                ClickhouseClusterResponseLayoutsReplicatedOwner `tfsdk:"owner"`
	Port                 types.Int64                                     `tfsdk:"port"`
	PublicEndpoint       types.Bool                                      `tfsdk:"public_endpoint"`
	QueryMonitoringURL   types.String                                    `tfsdk:"query_monitoring_url"`
	Region               types.String                                    `tfsdk:"region"`
	Replicas             types.String                                    `tfsdk:"replicas"`
	ReplicateSchema      types.Bool                                      `tfsdk:"replicate_schema"`
	Secure               types.Bool                                      `tfsdk:"secure"`
	Shards               types.Int64                                     `tfsdk:"shards"`
	Size                 types.Int64                                     `tfsdk:"size"`
	SSHPort              types.Int64                                     `tfsdk:"ssh_port"`
	StartupMode          types.String                                    `tfsdk:"startup_mode"`
	Status               types.String                                    `tfsdk:"status"`
	StorageClass         types.String                                    `tfsdk:"storage_class"`
	SystemMonitoringURL  types.String                                    `tfsdk:"system_monitoring_url"`
	SystemVersion        types.String                                    `tfsdk:"system_version"`
	Type                 types.String                                    `tfsdk:"type"`
	Uptime               types.String                                    `tfsdk:"uptime"`
	UptimeSettings       ClickhouseClusterResponseUptimeSettings         `tfsdk:"uptime_settings"`
	Version              types.String                                    `tfsdk:"version"`
	VersionImage         types.String                                    `tfsdk:"version_image"`
	Zookeeper            types.String                                    `tfsdk:"zookeeper"`
	ZookeeperOptions     ClickhouseClusterRequestInputZookeeperOptions   `tfsdk:"zookeeper_options"`
}

func (r *ClickhouseClusterResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_clickhouse_cluster"
}

func (r *ClickhouseClusterResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "ClickhouseCluster Resource",

		Attributes: map[string]schema.Attribute{
			"admin_pass": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required:  true,
				Sensitive: true,
			},
			"admin_user": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"alerts_settings": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"rescale": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"email": schema.BoolAttribute{
								Computed: true,
							},
							"popup": schema.BoolAttribute{
								Computed: true,
							},
						},
					},
					"resume": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"email": schema.BoolAttribute{
								Computed: true,
							},
							"popup": schema.BoolAttribute{
								Computed: true,
							},
						},
					},
					"stop": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"email": schema.BoolAttribute{
								Computed: true,
							},
							"popup": schema.BoolAttribute{
								Computed: true,
							},
						},
					},
					"upgrade": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"email": schema.BoolAttribute{
								Computed: true,
							},
							"popup": schema.BoolAttribute{
								Computed: true,
							},
						},
					},
				},
			},
			"alternate_endpoints": schema.ListAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplace(),
				},
				Required:    true,
				ElementType: types.StringType,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"altinity_support": schema.StringAttribute{
				Computed: true,
			},
			"azlist": schema.ListAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplace(),
				},
				Required:    true,
				ElementType: types.StringType,
			},
			"backup_options": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Required: true,
				Attributes: map[string]schema.Attribute{
					"arn": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Required: true,
					},
					"bucket": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Required: true,
					},
					"compression_format": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Required: true,
					},
					"day": schema.Int64Attribute{
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.RequiresReplace(),
						},
						Required: true,
					},
					"enable": schema.BoolAttribute{
						PlanModifiers: []planmodifier.Bool{
							boolplanmodifier.RequiresReplace(),
						},
						Required: true,
					},
					"keep": schema.StringAttribute{
						Computed: true,
					},
					"path": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Required: true,
					},
					"provider": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Required: true,
					},
					"region": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Required: true,
					},
					"schedule": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Required: true,
					},
					"secret_key": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Required:  true,
						Sensitive: true,
					},
					"settings": schema.ListNestedAttribute{
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplace(),
						},
						Required: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"day": schema.Int64Attribute{
									PlanModifiers: []planmodifier.Int64{
										int64planmodifier.RequiresReplace(),
									},
									Required: true,
								},
								"keep": schema.Int64Attribute{
									PlanModifiers: []planmodifier.Int64{
										int64planmodifier.RequiresReplace(),
									},
									Required: true,
								},
								"period": schema.StringAttribute{
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplace(),
									},
									Required: true,
								},
								"time": schema.StringAttribute{
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplace(),
									},
									Required: true,
								},
							},
						},
					},
					"time": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Required: true,
					},
				},
			},
			"can_publish": schema.BoolAttribute{
				Computed: true,
			},
			"can_rescale": schema.BoolAttribute{
				Computed: true,
			},
			"cluster_monitoring_url": schema.StringAttribute{
				Computed: true,
			},
			"datadog_settings": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Required: true,
				Attributes: map[string]schema.Attribute{
					"logs": schema.BoolAttribute{
						PlanModifiers: []planmodifier.Bool{
							boolplanmodifier.RequiresReplace(),
						},
						Required: true,
					},
					"metrics": schema.BoolAttribute{
						PlanModifiers: []planmodifier.Bool{
							boolplanmodifier.RequiresReplace(),
						},
						Required: true,
					},
				},
			},
			"disks": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"domain_name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"environment": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"auto_push": schema.BoolAttribute{
						Computed: true,
					},
					"auto_zk_push": schema.StringAttribute{
						Computed: true,
					},
					"aws_settings_auto": schema.BoolAttribute{
						Computed: true,
					},
					"backup_options": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"bucket": schema.StringAttribute{
								Computed: true,
							},
							"compression_format": schema.StringAttribute{
								Computed: true,
							},
							"day": schema.Int64Attribute{
								Computed: true,
							},
							"enable": schema.BoolAttribute{
								Computed: true,
							},
							"keep": schema.StringAttribute{
								Computed: true,
							},
							"path": schema.StringAttribute{
								Computed: true,
							},
							"provider": schema.StringAttribute{
								Computed: true,
							},
							"region": schema.StringAttribute{
								Computed: true,
							},
							"schedule": schema.StringAttribute{
								Computed: true,
							},
							"secret_key": schema.StringAttribute{
								Computed:  true,
								Sensitive: true,
							},
							"time": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"core_cidr": schema.StringAttribute{
						Computed: true,
					},
					"created": schema.StringAttribute{
						Computed: true,
					},
					"dashboard_url": schema.StringAttribute{
						Computed: true,
					},
					"datadog_settings": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Computed: true,
							},
							"key": schema.StringAttribute{
								Computed: true,
							},
							"region": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"domain": schema.StringAttribute{
						Computed: true,
					},
					"external_dns": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"id_owner": schema.StringAttribute{
						Computed: true,
					},
					"is_anywhere": schema.BoolAttribute{
						Computed: true,
					},
					"kube_api_url": schema.StringAttribute{
						Computed: true,
					},
					"kube_auth_options": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"ca_cert": schema.StringAttribute{
								Computed: true,
							},
							"client_cert": schema.StringAttribute{
								Computed: true,
							},
							"client_key": schema.StringAttribute{
								Computed: true,
							},
							"type": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"kube_check": schema.StringAttribute{
						Computed: true,
					},
					"kube_cho_version": schema.StringAttribute{
						Computed: true,
					},
					"kube_lb_type": schema.StringAttribute{
						Computed: true,
					},
					"kube_managed_p_vs": schema.BoolAttribute{
						Computed: true,
					},
					"kube_namespace": schema.StringAttribute{
						Computed: true,
					},
					"kube_namespace_manage": schema.BoolAttribute{
						Computed: true,
					},
					"kube_provider": schema.StringAttribute{
						Computed: true,
					},
					"kube_startup_mode": schema.StringAttribute{
						Computed: true,
					},
					"kube_token": schema.StringAttribute{
						Computed:  true,
						Sensitive: true,
					},
					"listen_check": schema.StringAttribute{
						Computed: true,
					},
					"logs_storage": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"bucket": schema.StringAttribute{
								Computed: true,
							},
							"region": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"monitoring": schema.BoolAttribute{
						Computed: true,
					},
					"monitoring_info": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"db_altinity_clickhouse_operator_dashboard": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"uid": schema.StringAttribute{
										Computed: true,
									},
									"url": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"db_clickhouse_in_kubernetes_queries": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"uid": schema.StringAttribute{
										Computed: true,
									},
									"url": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"db_logs_dashboard": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"uid": schema.StringAttribute{
										Computed: true,
									},
									"url": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"db_system_load": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"uid": schema.StringAttribute{
										Computed: true,
									},
									"url": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"db_zookeeper_dashboard": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"uid": schema.StringAttribute{
										Computed: true,
									},
									"url": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
					},
					"monitoring_url": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"options": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"azlist": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"network": schema.StringAttribute{
								Computed: true,
							},
							"size_multiplier": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"pass": schema.StringAttribute{
						Computed:  true,
						Sensitive: true,
					},
					"resource_limits": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"cpu": schema.StringAttribute{
								Computed: true,
							},
							"memory": schema.StringAttribute{
								Computed: true,
							},
							"nodes": schema.Int64Attribute{
								Computed: true,
							},
							"replicas": schema.Int64Attribute{
								Computed: true,
							},
							"shards": schema.Int64Attribute{
								Computed: true,
							},
							"storage": schema.StringAttribute{
								Computed: true,
							},
							"volume_rescale": schema.Int64Attribute{
								Computed: true,
							},
						},
					},
					"sni_proxy_for_ch": schema.BoolAttribute{
						Computed: true,
					},
					"ssl_certificate_arn": schema.StringAttribute{
						Computed: true,
					},
					"status": schema.StringAttribute{
						Computed: true,
					},
					"type": schema.StringAttribute{
						Computed: true,
					},
					"user": schema.StringAttribute{
						Computed: true,
					},
					"vpc_endpoints": schema.BoolAttribute{
						Computed: true,
					},
				},
			},
			"has_changes": schema.BoolAttribute{
				Computed: true,
			},
			"has_migration": schema.BoolAttribute{
				Computed: true,
			},
			"host": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"http_port": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"id_environment": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"id_owner": schema.StringAttribute{
				Computed: true,
			},
			"initial_action": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"user": schema.StringAttribute{
						Computed: true,
					},
					"user_email": schema.StringAttribute{
						Computed: true,
					},
					"user_id": schema.Int64Attribute{
						Computed: true,
					},
				},
			},
			"internal_domain_name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"internal_name": schema.StringAttribute{
				Computed: true,
			},
			"ip_whitelist": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"layouts": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"replicated": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"alerts_settings": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"rescale": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"email": schema.BoolAttribute{
												Computed: true,
											},
											"popup": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
									"resume": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"email": schema.BoolAttribute{
												Computed: true,
											},
											"popup": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
									"stop": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"email": schema.BoolAttribute{
												Computed: true,
											},
											"popup": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
									"upgrade": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"email": schema.BoolAttribute{
												Computed: true,
											},
											"popup": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
								},
							},
							"alternate_endpoints": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(validators.IsValidJSON()),
								},
							},
							"backup_options": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"bucket": schema.StringAttribute{
										Computed: true,
									},
									"compression_format": schema.StringAttribute{
										Computed: true,
									},
									"day": schema.Int64Attribute{
										Computed: true,
									},
									"enable": schema.BoolAttribute{
										Computed: true,
									},
									"keep": schema.StringAttribute{
										Computed: true,
									},
									"path": schema.StringAttribute{
										Computed: true,
									},
									"provider": schema.StringAttribute{
										Computed: true,
									},
									"region": schema.StringAttribute{
										Computed: true,
									},
									"schedule": schema.StringAttribute{
										Computed: true,
									},
									"secret_key": schema.StringAttribute{
										Computed:  true,
										Sensitive: true,
									},
									"time": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"can_publish": schema.BoolAttribute{
								Computed: true,
							},
							"can_rescale": schema.BoolAttribute{
								Computed: true,
							},
							"cluster_monitoring_url": schema.StringAttribute{
								Computed: true,
							},
							"datadog_settings": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"logs": schema.BoolAttribute{
										Computed: true,
									},
									"metrics": schema.BoolAttribute{
										Computed: true,
									},
								},
							},
							"environment": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"auto_push": schema.BoolAttribute{
										Computed: true,
									},
									"auto_zk_push": schema.StringAttribute{
										Computed: true,
									},
									"aws_settings_auto": schema.BoolAttribute{
										Computed: true,
									},
									"backup_options": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"bucket": schema.StringAttribute{
												Computed: true,
											},
											"compression_format": schema.StringAttribute{
												Computed: true,
											},
											"day": schema.Int64Attribute{
												Computed: true,
											},
											"enable": schema.BoolAttribute{
												Computed: true,
											},
											"keep": schema.StringAttribute{
												Computed: true,
											},
											"path": schema.StringAttribute{
												Computed: true,
											},
											"provider": schema.StringAttribute{
												Computed: true,
											},
											"region": schema.StringAttribute{
												Computed: true,
											},
											"schedule": schema.StringAttribute{
												Computed: true,
											},
											"secret_key": schema.StringAttribute{
												Computed:  true,
												Sensitive: true,
											},
											"time": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"core_cidr": schema.StringAttribute{
										Computed: true,
									},
									"created": schema.StringAttribute{
										Computed: true,
									},
									"dashboard_url": schema.StringAttribute{
										Computed: true,
									},
									"datadog_settings": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"enabled": schema.BoolAttribute{
												Computed: true,
											},
											"key": schema.StringAttribute{
												Computed: true,
											},
											"region": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"domain": schema.StringAttribute{
										Computed: true,
									},
									"external_dns": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"id_owner": schema.StringAttribute{
										Computed: true,
									},
									"is_anywhere": schema.BoolAttribute{
										Computed: true,
									},
									"kube_api_url": schema.StringAttribute{
										Computed: true,
									},
									"kube_auth_options": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"ca_cert": schema.StringAttribute{
												Computed: true,
											},
											"client_cert": schema.StringAttribute{
												Computed: true,
											},
											"client_key": schema.StringAttribute{
												Computed: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"kube_check": schema.StringAttribute{
										Computed: true,
									},
									"kube_cho_version": schema.StringAttribute{
										Computed: true,
									},
									"kube_lb_type": schema.StringAttribute{
										Computed: true,
									},
									"kube_managed_p_vs": schema.BoolAttribute{
										Computed: true,
									},
									"kube_namespace": schema.StringAttribute{
										Computed: true,
									},
									"kube_namespace_manage": schema.BoolAttribute{
										Computed: true,
									},
									"kube_provider": schema.StringAttribute{
										Computed: true,
									},
									"kube_startup_mode": schema.StringAttribute{
										Computed: true,
									},
									"kube_token": schema.StringAttribute{
										Computed:  true,
										Sensitive: true,
									},
									"listen_check": schema.StringAttribute{
										Computed: true,
									},
									"logs_storage": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"bucket": schema.StringAttribute{
												Computed: true,
											},
											"region": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"monitoring": schema.BoolAttribute{
										Computed: true,
									},
									"monitoring_info": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"db_altinity_clickhouse_operator_dashboard": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"uid": schema.StringAttribute{
														Computed: true,
													},
													"url": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"db_clickhouse_in_kubernetes_queries": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"uid": schema.StringAttribute{
														Computed: true,
													},
													"url": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"db_logs_dashboard": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"uid": schema.StringAttribute{
														Computed: true,
													},
													"url": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"db_system_load": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"uid": schema.StringAttribute{
														Computed: true,
													},
													"url": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"db_zookeeper_dashboard": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"uid": schema.StringAttribute{
														Computed: true,
													},
													"url": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
									},
									"monitoring_url": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"options": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"azlist": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"network": schema.StringAttribute{
												Computed: true,
											},
											"size_multiplier": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"pass": schema.StringAttribute{
										Computed:  true,
										Sensitive: true,
									},
									"resource_limits": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"cpu": schema.StringAttribute{
												Computed: true,
											},
											"memory": schema.StringAttribute{
												Computed: true,
											},
											"nodes": schema.Int64Attribute{
												Computed: true,
											},
											"replicas": schema.Int64Attribute{
												Computed: true,
											},
											"shards": schema.Int64Attribute{
												Computed: true,
											},
											"storage": schema.StringAttribute{
												Computed: true,
											},
											"volume_rescale": schema.Int64Attribute{
												Computed: true,
											},
										},
									},
									"sni_proxy_for_ch": schema.BoolAttribute{
										Computed: true,
									},
									"ssl_certificate_arn": schema.StringAttribute{
										Computed: true,
									},
									"status": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
									"user": schema.StringAttribute{
										Computed: true,
									},
									"vpc_endpoints": schema.BoolAttribute{
										Computed: true,
									},
								},
							},
							"has_changes": schema.BoolAttribute{
								Computed: true,
							},
							"has_migration": schema.BoolAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"id_environment": schema.StringAttribute{
								Computed: true,
							},
							"id_owner": schema.StringAttribute{
								Computed: true,
							},
							"id_parent": schema.StringAttribute{
								Computed: true,
							},
							"initial_action": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"user": schema.StringAttribute{
										Computed: true,
									},
									"user_email": schema.StringAttribute{
										Computed: true,
									},
									"user_id": schema.Int64Attribute{
										Computed: true,
									},
								},
							},
							"internal_name": schema.StringAttribute{
								Computed: true,
							},
							"layouts": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(validators.IsValidJSON()),
								},
							},
							"logs_monitoring_url": schema.StringAttribute{
								Computed: true,
							},
							"migration_progress": schema.Int64Attribute{
								Computed: true,
							},
							"mysql_protocol": schema.BoolAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"normalized_name": schema.StringAttribute{
								Computed: true,
							},
							"owner": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"backup_tool": schema.StringAttribute{
										Computed: true,
									},
									"blocked": schema.BoolAttribute{
										Computed: true,
									},
									"dark_theme": schema.BoolAttribute{
										Computed: true,
									},
									"email": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"id_organization": schema.StringAttribute{
										Computed: true,
									},
									"id_role": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"organization": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"auto_charge": schema.BoolAttribute{
												Computed: true,
											},
											"blocked": schema.BoolAttribute{
												Computed: true,
											},
											"blocked_api": schema.BoolAttribute{
												Computed: true,
											},
											"blocked_password": schema.BoolAttribute{
												Computed: true,
											},
											"company_name": schema.StringAttribute{
												Computed: true,
											},
											"email_domain": schema.StringAttribute{
												Computed: true,
											},
											"expired": schema.BoolAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"id_default_user_role": schema.StringAttribute{
												Computed: true,
											},
											"id_owner": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"opened": schema.BoolAttribute{
												Computed: true,
											},
											"trial": schema.BoolAttribute{
												Computed: true,
											},
											"trial_expiry": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"origins": schema.StringAttribute{
										Computed: true,
									},
									"password": schema.StringAttribute{
										Computed:  true,
										Sensitive: true,
									},
									"role": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"rights": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"access": schema.StringAttribute{
															Computed: true,
														},
														"action": schema.StringAttribute{
															Computed: true,
														},
														"class": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"system": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
								},
							},
							"query_monitoring_url": schema.StringAttribute{
								Computed: true,
							},
							"replicas": schema.Int64Attribute{
								Computed: true,
							},
							"secure": schema.BoolAttribute{
								Computed: true,
							},
							"shards": schema.Int64Attribute{
								Computed: true,
							},
							"system_monitoring_url": schema.StringAttribute{
								Computed: true,
							},
							"system_version": schema.StringAttribute{
								Computed: true,
							},
							"uptime": schema.StringAttribute{
								Computed: true,
							},
							"uptime_settings": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(validators.IsValidJSON()),
								},
							},
							"version": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"sharded": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"alerts_settings": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"rescale": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"email": schema.BoolAttribute{
												Computed: true,
											},
											"popup": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
									"resume": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"email": schema.BoolAttribute{
												Computed: true,
											},
											"popup": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
									"stop": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"email": schema.BoolAttribute{
												Computed: true,
											},
											"popup": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
									"upgrade": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"email": schema.BoolAttribute{
												Computed: true,
											},
											"popup": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
								},
							},
							"alternate_endpoints": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(validators.IsValidJSON()),
								},
							},
							"backup_options": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"bucket": schema.StringAttribute{
										Computed: true,
									},
									"compression_format": schema.StringAttribute{
										Computed: true,
									},
									"day": schema.Int64Attribute{
										Computed: true,
									},
									"enable": schema.BoolAttribute{
										Computed: true,
									},
									"keep": schema.StringAttribute{
										Computed: true,
									},
									"path": schema.StringAttribute{
										Computed: true,
									},
									"provider": schema.StringAttribute{
										Computed: true,
									},
									"region": schema.StringAttribute{
										Computed: true,
									},
									"schedule": schema.StringAttribute{
										Computed: true,
									},
									"secret_key": schema.StringAttribute{
										Computed:  true,
										Sensitive: true,
									},
									"time": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"can_publish": schema.BoolAttribute{
								Computed: true,
							},
							"can_rescale": schema.BoolAttribute{
								Computed: true,
							},
							"cluster_monitoring_url": schema.StringAttribute{
								Computed: true,
							},
							"datadog_settings": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"logs": schema.BoolAttribute{
										Computed: true,
									},
									"metrics": schema.BoolAttribute{
										Computed: true,
									},
								},
							},
							"environment": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"auto_push": schema.BoolAttribute{
										Computed: true,
									},
									"auto_zk_push": schema.StringAttribute{
										Computed: true,
									},
									"aws_settings_auto": schema.BoolAttribute{
										Computed: true,
									},
									"backup_options": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"bucket": schema.StringAttribute{
												Computed: true,
											},
											"compression_format": schema.StringAttribute{
												Computed: true,
											},
											"day": schema.Int64Attribute{
												Computed: true,
											},
											"enable": schema.BoolAttribute{
												Computed: true,
											},
											"keep": schema.StringAttribute{
												Computed: true,
											},
											"path": schema.StringAttribute{
												Computed: true,
											},
											"provider": schema.StringAttribute{
												Computed: true,
											},
											"region": schema.StringAttribute{
												Computed: true,
											},
											"schedule": schema.StringAttribute{
												Computed: true,
											},
											"secret_key": schema.StringAttribute{
												Computed:  true,
												Sensitive: true,
											},
											"time": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"core_cidr": schema.StringAttribute{
										Computed: true,
									},
									"created": schema.StringAttribute{
										Computed: true,
									},
									"dashboard_url": schema.StringAttribute{
										Computed: true,
									},
									"datadog_settings": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"enabled": schema.BoolAttribute{
												Computed: true,
											},
											"key": schema.StringAttribute{
												Computed: true,
											},
											"region": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"domain": schema.StringAttribute{
										Computed: true,
									},
									"external_dns": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"id_owner": schema.StringAttribute{
										Computed: true,
									},
									"is_anywhere": schema.BoolAttribute{
										Computed: true,
									},
									"kube_api_url": schema.StringAttribute{
										Computed: true,
									},
									"kube_auth_options": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"ca_cert": schema.StringAttribute{
												Computed: true,
											},
											"client_cert": schema.StringAttribute{
												Computed: true,
											},
											"client_key": schema.StringAttribute{
												Computed: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"kube_check": schema.StringAttribute{
										Computed: true,
									},
									"kube_cho_version": schema.StringAttribute{
										Computed: true,
									},
									"kube_lb_type": schema.StringAttribute{
										Computed: true,
									},
									"kube_managed_p_vs": schema.BoolAttribute{
										Computed: true,
									},
									"kube_namespace": schema.StringAttribute{
										Computed: true,
									},
									"kube_namespace_manage": schema.BoolAttribute{
										Computed: true,
									},
									"kube_provider": schema.StringAttribute{
										Computed: true,
									},
									"kube_startup_mode": schema.StringAttribute{
										Computed: true,
									},
									"kube_token": schema.StringAttribute{
										Computed:  true,
										Sensitive: true,
									},
									"listen_check": schema.StringAttribute{
										Computed: true,
									},
									"logs_storage": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"bucket": schema.StringAttribute{
												Computed: true,
											},
											"region": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"monitoring": schema.BoolAttribute{
										Computed: true,
									},
									"monitoring_info": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"db_altinity_clickhouse_operator_dashboard": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"uid": schema.StringAttribute{
														Computed: true,
													},
													"url": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"db_clickhouse_in_kubernetes_queries": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"uid": schema.StringAttribute{
														Computed: true,
													},
													"url": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"db_logs_dashboard": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"uid": schema.StringAttribute{
														Computed: true,
													},
													"url": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"db_system_load": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"uid": schema.StringAttribute{
														Computed: true,
													},
													"url": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"db_zookeeper_dashboard": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"uid": schema.StringAttribute{
														Computed: true,
													},
													"url": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
									},
									"monitoring_url": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"options": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"azlist": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"network": schema.StringAttribute{
												Computed: true,
											},
											"size_multiplier": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"pass": schema.StringAttribute{
										Computed:  true,
										Sensitive: true,
									},
									"resource_limits": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"cpu": schema.StringAttribute{
												Computed: true,
											},
											"memory": schema.StringAttribute{
												Computed: true,
											},
											"nodes": schema.Int64Attribute{
												Computed: true,
											},
											"replicas": schema.Int64Attribute{
												Computed: true,
											},
											"shards": schema.Int64Attribute{
												Computed: true,
											},
											"storage": schema.StringAttribute{
												Computed: true,
											},
											"volume_rescale": schema.Int64Attribute{
												Computed: true,
											},
										},
									},
									"sni_proxy_for_ch": schema.BoolAttribute{
										Computed: true,
									},
									"ssl_certificate_arn": schema.StringAttribute{
										Computed: true,
									},
									"status": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
									"user": schema.StringAttribute{
										Computed: true,
									},
									"vpc_endpoints": schema.BoolAttribute{
										Computed: true,
									},
								},
							},
							"has_changes": schema.BoolAttribute{
								Computed: true,
							},
							"has_migration": schema.BoolAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"id_environment": schema.StringAttribute{
								Computed: true,
							},
							"id_owner": schema.StringAttribute{
								Computed: true,
							},
							"id_parent": schema.StringAttribute{
								Computed: true,
							},
							"initial_action": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"user": schema.StringAttribute{
										Computed: true,
									},
									"user_email": schema.StringAttribute{
										Computed: true,
									},
									"user_id": schema.Int64Attribute{
										Computed: true,
									},
								},
							},
							"internal_name": schema.StringAttribute{
								Computed: true,
							},
							"layouts": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(validators.IsValidJSON()),
								},
							},
							"logs_monitoring_url": schema.StringAttribute{
								Computed: true,
							},
							"migration_progress": schema.Int64Attribute{
								Computed: true,
							},
							"mysql_protocol": schema.BoolAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"nodes": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(validators.IsValidJSON()),
								},
							},
							"normalized_name": schema.StringAttribute{
								Computed: true,
							},
							"owner": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"backup_tool": schema.StringAttribute{
										Computed: true,
									},
									"blocked": schema.BoolAttribute{
										Computed: true,
									},
									"dark_theme": schema.BoolAttribute{
										Computed: true,
									},
									"email": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"id_organization": schema.StringAttribute{
										Computed: true,
									},
									"id_role": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"organization": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"auto_charge": schema.BoolAttribute{
												Computed: true,
											},
											"blocked": schema.BoolAttribute{
												Computed: true,
											},
											"blocked_api": schema.BoolAttribute{
												Computed: true,
											},
											"blocked_password": schema.BoolAttribute{
												Computed: true,
											},
											"company_name": schema.StringAttribute{
												Computed: true,
											},
											"email_domain": schema.StringAttribute{
												Computed: true,
											},
											"expired": schema.BoolAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"id_default_user_role": schema.StringAttribute{
												Computed: true,
											},
											"id_owner": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"opened": schema.BoolAttribute{
												Computed: true,
											},
											"trial": schema.BoolAttribute{
												Computed: true,
											},
											"trial_expiry": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"origins": schema.StringAttribute{
										Computed: true,
									},
									"password": schema.StringAttribute{
										Computed:  true,
										Sensitive: true,
									},
									"role": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"rights": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"access": schema.StringAttribute{
															Computed: true,
														},
														"action": schema.StringAttribute{
															Computed: true,
														},
														"class": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"system": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
								},
							},
							"query_monitoring_url": schema.StringAttribute{
								Computed: true,
							},
							"replicas": schema.Int64Attribute{
								Computed: true,
							},
							"secure": schema.BoolAttribute{
								Computed: true,
							},
							"shards": schema.Int64Attribute{
								Computed: true,
							},
							"system_monitoring_url": schema.StringAttribute{
								Computed: true,
							},
							"system_version": schema.StringAttribute{
								Computed: true,
							},
							"uptime": schema.StringAttribute{
								Computed: true,
							},
							"uptime_settings": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(validators.IsValidJSON()),
								},
							},
							"version": schema.StringAttribute{
								Computed: true,
							},
						},
					},
				},
			},
			"lb_type": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"logs_monitoring_url": schema.StringAttribute{
				Computed: true,
			},
			"migration_progress": schema.Int64Attribute{
				Computed: true,
			},
			"mysql_protocol": schema.BoolAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"nodes": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"node_type": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"normalized_name": schema.StringAttribute{
				Computed: true,
			},
			"options": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"acm_host": schema.StringAttribute{
						Computed: true,
					},
					"azlist": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"cpu": schema.StringAttribute{
						Computed: true,
					},
					"disks": schema.Int64Attribute{
						Computed: true,
					},
					"ip_whitelist": schema.StringAttribute{
						Computed: true,
					},
					"lb_type": schema.StringAttribute{
						Computed: true,
					},
					"managed_p_vs": schema.BoolAttribute{
						Computed: true,
					},
					"memory": schema.StringAttribute{
						Computed: true,
					},
					"region": schema.StringAttribute{
						Computed: true,
					},
					"size": schema.Int64Attribute{
						Computed: true,
					},
					"static": schema.BoolAttribute{
						Computed: true,
					},
					"storage_class": schema.StringAttribute{
						Computed: true,
					},
					"type": schema.StringAttribute{
						Computed: true,
					},
					"version": schema.StringAttribute{
						Computed: true,
					},
					"zk_root": schema.BoolAttribute{
						Computed: true,
					},
				},
			},
			"owner": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"backup_tool": schema.StringAttribute{
						Computed: true,
					},
					"blocked": schema.BoolAttribute{
						Computed: true,
					},
					"dark_theme": schema.BoolAttribute{
						Computed: true,
					},
					"email": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"id_organization": schema.StringAttribute{
						Computed: true,
					},
					"id_role": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"organization": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"auto_charge": schema.BoolAttribute{
								Computed: true,
							},
							"blocked": schema.BoolAttribute{
								Computed: true,
							},
							"blocked_api": schema.BoolAttribute{
								Computed: true,
							},
							"blocked_password": schema.BoolAttribute{
								Computed: true,
							},
							"company_name": schema.StringAttribute{
								Computed: true,
							},
							"email_domain": schema.StringAttribute{
								Computed: true,
							},
							"expired": schema.BoolAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"id_default_user_role": schema.StringAttribute{
								Computed: true,
							},
							"id_owner": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"opened": schema.BoolAttribute{
								Computed: true,
							},
							"trial": schema.BoolAttribute{
								Computed: true,
							},
							"trial_expiry": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"origins": schema.StringAttribute{
						Computed: true,
					},
					"password": schema.StringAttribute{
						Computed:  true,
						Sensitive: true,
					},
					"role": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"rights": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"access": schema.StringAttribute{
											Computed: true,
										},
										"action": schema.StringAttribute{
											Computed: true,
										},
										"class": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"system": schema.BoolAttribute{
								Computed: true,
							},
						},
					},
				},
			},
			"port": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"public_endpoint": schema.BoolAttribute{
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"query_monitoring_url": schema.StringAttribute{
				Computed: true,
			},
			"region": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"replicas": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"replicate_schema": schema.BoolAttribute{
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"secure": schema.BoolAttribute{
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"shards": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"size": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"ssh_port": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"startup_mode": schema.StringAttribute{
				Computed: true,
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
			"storage_class": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"system_monitoring_url": schema.StringAttribute{
				Computed: true,
			},
			"system_version": schema.StringAttribute{
				Computed: true,
			},
			"type": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"uptime": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"uptime_settings": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Required: true,
				Attributes: map[string]schema.Attribute{
					"inactive_hours": schema.Int64Attribute{
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.RequiresReplace(),
						},
						Required: true,
					},
					"schedule": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Required: true,
						Attributes: map[string]schema.Attribute{
							"fri": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Required: true,
								Attributes: map[string]schema.Attribute{
									"active": schema.BoolAttribute{
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplace(),
										},
										Required: true,
									},
									"all_day": schema.BoolAttribute{
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplace(),
										},
										Required: true,
									},
									"range": schema.SingleNestedAttribute{
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplace(),
										},
										Required: true,
										Attributes: map[string]schema.Attribute{
											"from": schema.StringAttribute{
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplace(),
												},
												Required: true,
											},
											"to": schema.StringAttribute{
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplace(),
												},
												Required: true,
											},
										},
									},
								},
							},
							"mon": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Required: true,
								Attributes: map[string]schema.Attribute{
									"active": schema.BoolAttribute{
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplace(),
										},
										Required: true,
									},
									"all_day": schema.BoolAttribute{
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplace(),
										},
										Required: true,
									},
									"range": schema.SingleNestedAttribute{
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplace(),
										},
										Required: true,
										Attributes: map[string]schema.Attribute{
											"from": schema.StringAttribute{
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplace(),
												},
												Required: true,
											},
											"to": schema.StringAttribute{
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplace(),
												},
												Required: true,
											},
										},
									},
								},
							},
							"sat": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Required: true,
								Attributes: map[string]schema.Attribute{
									"active": schema.BoolAttribute{
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplace(),
										},
										Required: true,
									},
									"all_day": schema.BoolAttribute{
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplace(),
										},
										Required: true,
									},
									"range": schema.SingleNestedAttribute{
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplace(),
										},
										Required: true,
										Attributes: map[string]schema.Attribute{
											"from": schema.StringAttribute{
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplace(),
												},
												Required: true,
											},
											"to": schema.StringAttribute{
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplace(),
												},
												Required: true,
											},
										},
									},
								},
							},
							"sun": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Required: true,
								Attributes: map[string]schema.Attribute{
									"active": schema.BoolAttribute{
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplace(),
										},
										Required: true,
									},
									"all_day": schema.BoolAttribute{
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplace(),
										},
										Required: true,
									},
									"range": schema.SingleNestedAttribute{
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplace(),
										},
										Required: true,
										Attributes: map[string]schema.Attribute{
											"from": schema.StringAttribute{
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplace(),
												},
												Required: true,
											},
											"to": schema.StringAttribute{
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplace(),
												},
												Required: true,
											},
										},
									},
								},
							},
							"thu": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Required: true,
								Attributes: map[string]schema.Attribute{
									"active": schema.BoolAttribute{
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplace(),
										},
										Required: true,
									},
									"all_day": schema.BoolAttribute{
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplace(),
										},
										Required: true,
									},
									"range": schema.SingleNestedAttribute{
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplace(),
										},
										Required: true,
										Attributes: map[string]schema.Attribute{
											"from": schema.StringAttribute{
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplace(),
												},
												Required: true,
											},
											"to": schema.StringAttribute{
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplace(),
												},
												Required: true,
											},
										},
									},
								},
							},
							"tue": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Required: true,
								Attributes: map[string]schema.Attribute{
									"active": schema.BoolAttribute{
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplace(),
										},
										Required: true,
									},
									"all_day": schema.BoolAttribute{
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplace(),
										},
										Required: true,
									},
									"range": schema.SingleNestedAttribute{
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplace(),
										},
										Required: true,
										Attributes: map[string]schema.Attribute{
											"from": schema.StringAttribute{
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplace(),
												},
												Required: true,
											},
											"to": schema.StringAttribute{
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplace(),
												},
												Required: true,
											},
										},
									},
								},
							},
							"wed": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Required: true,
								Attributes: map[string]schema.Attribute{
									"active": schema.BoolAttribute{
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplace(),
										},
										Required: true,
									},
									"all_day": schema.BoolAttribute{
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplace(),
										},
										Required: true,
									},
									"range": schema.SingleNestedAttribute{
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplace(),
										},
										Required: true,
										Attributes: map[string]schema.Attribute{
											"from": schema.StringAttribute{
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplace(),
												},
												Required: true,
											},
											"to": schema.StringAttribute{
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplace(),
												},
												Required: true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"version": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"version_image": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"zookeeper": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"zookeeper_options": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Required: true,
				Attributes: map[string]schema.Attribute{
					"root": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Required: true,
					},
					"size": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Required: true,
					},
					"tag": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Required: true,
					},
				},
			},
		},
	}
}

func (r *ClickhouseClusterResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ClickhouseClusterResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *ClickhouseClusterResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	clickhouseClusterRequestInput := *data.ToCreateSDKType()
	idEnvironment := data.IDEnvironment.ValueString()
	request := operations.PostAPIIDEnvironmentClusterLaunchRequest{
		ClickhouseClusterRequestInput: clickhouseClusterRequestInput,
		IDEnvironment:                 idEnvironment,
	}
	res, err := r.client.PostAPIIDEnvironmentClusterLaunch(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if fmt.Sprintf("%v", res.StatusCode)[0] != '2' {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.PostAPIIDEnvironmentClusterLaunch2XXApplicationJSONObject.Data == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.PostAPIIDEnvironmentClusterLaunch2XXApplicationJSONObject.Data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ClickhouseClusterResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *ClickhouseClusterResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ClickhouseClusterResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *ClickhouseClusterResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ClickhouseClusterResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *ClickhouseClusterResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.DeleteAPIClusterID1Request{
		ID: id,
	}
	res, err := r.client.DeleteAPIClusterID1(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if fmt.Sprintf("%v", res.StatusCode)[0] != '2' {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *ClickhouseClusterResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource clickhouse_cluster.")
}

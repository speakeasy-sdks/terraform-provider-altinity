// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"altinity/internal/sdk/pkg/models/shared"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ClickhouseClusterResourceModel) ToCreateSDKType() *shared.ClickhouseClusterRequestInput {
	adminPass := r.AdminPass.ValueString()
	adminUser := r.AdminUser.ValueString()
	alternateEndpoints := make([]interface{}, 0)
	for _, alternateEndpointsItem := range r.AlternateEndpoints {
		var alternateEndpointsTmp interface{}
		_ = json.Unmarshal([]byte(alternateEndpointsItem.ValueString()), &alternateEndpointsTmp)
		alternateEndpoints = append(alternateEndpoints, alternateEndpointsTmp)
	}
	azlist := make([]string, 0)
	for _, azlistItem := range r.Azlist {
		azlist = append(azlist, azlistItem.ValueString())
	}
	arn := r.BackupOptions.Arn.ValueString()
	bucket := r.BackupOptions.Bucket.ValueString()
	compressionFormat := r.BackupOptions.CompressionFormat.ValueString()
	day := r.BackupOptions.Day.ValueInt64()
	enable := r.BackupOptions.Enable.ValueBool()
	path := r.BackupOptions.Path.ValueString()
	provider := r.BackupOptions.Provider.ValueString()
	region := r.BackupOptions.Region.ValueString()
	schedule := r.BackupOptions.Schedule.ValueString()
	secretKey := r.BackupOptions.SecretKey.ValueString()
	settings := make([]shared.ClickhouseClusterRequestInputBackupOptionsSettings, 0)
	for _, settingsItem := range r.BackupOptions.Settings {
		day1 := settingsItem.Day.ValueInt64()
		keep := settingsItem.Keep.ValueInt64()
		period := settingsItem.Period.ValueString()
		time := settingsItem.Time.ValueString()
		settings = append(settings, shared.ClickhouseClusterRequestInputBackupOptionsSettings{
			Day:    day1,
			Keep:   keep,
			Period: period,
			Time:   time,
		})
	}
	time1 := r.BackupOptions.Time.ValueString()
	backupOptions := shared.ClickhouseClusterRequestInputBackupOptions{
		Arn:               arn,
		Bucket:            bucket,
		CompressionFormat: compressionFormat,
		Day:               day,
		Enable:            enable,
		Path:              path,
		Provider:          provider,
		Region:            region,
		Schedule:          schedule,
		SecretKey:         secretKey,
		Settings:          settings,
		Time:              time1,
	}
	logs := r.DatadogSettings.Logs.ValueBool()
	metrics := r.DatadogSettings.Metrics.ValueBool()
	datadogSettings := shared.ClickhouseClusterRequestInputDatadogSettings{
		Logs:    logs,
		Metrics: metrics,
	}
	disks := r.Disks.ValueInt64()
	domainName := r.DomainName.ValueString()
	host := r.Host.ValueString()
	httpPort := r.HTTPPort.ValueInt64()
	internalDomainName := new(string)
	if !r.InternalDomainName.IsUnknown() && !r.InternalDomainName.IsNull() {
		*internalDomainName = r.InternalDomainName.ValueString()
	} else {
		internalDomainName = nil
	}
	ipWhitelist := r.IPWhitelist.ValueString()
	lbType := r.LbType.ValueString()
	name := r.Name.ValueString()
	nodeType := r.NodeType.ValueString()
	nodes := r.Nodes.ValueInt64()
	port := r.Port.ValueInt64()
	publicEndpoint := r.PublicEndpoint.ValueBool()
	region1 := r.Region.ValueString()
	replicas := r.Replicas.ValueString()
	replicateSchema := r.ReplicateSchema.ValueBool()
	secure := r.Secure.ValueBool()
	shards := r.Shards.ValueInt64()
	size := r.Size.ValueInt64()
	sshPort := r.SSHPort.ValueInt64()
	storageClass := r.StorageClass.ValueString()
	type1 := r.Type.ValueString()
	uptime := r.Uptime.ValueString()
	inactiveHours := r.UptimeSettings.InactiveHours.ValueInt64()
	active := r.UptimeSettings.Schedule.Fri.Active.ValueBool()
	allDay := r.UptimeSettings.Schedule.Fri.AllDay.ValueBool()
	from := r.UptimeSettings.Schedule.Fri.Range.From.ValueString()
	to := r.UptimeSettings.Schedule.Fri.Range.To.ValueString()
	range1 := shared.ClickhouseClusterRequestInputUptimeSettingsScheduleFriRange{
		From: from,
		To:   to,
	}
	fri := shared.ClickhouseClusterRequestInputUptimeSettingsScheduleFri{
		Active: active,
		AllDay: allDay,
		Range:  range1,
	}
	active1 := r.UptimeSettings.Schedule.Mon.Active.ValueBool()
	allDay1 := r.UptimeSettings.Schedule.Mon.AllDay.ValueBool()
	from1 := r.UptimeSettings.Schedule.Mon.Range.From.ValueString()
	to1 := r.UptimeSettings.Schedule.Mon.Range.To.ValueString()
	range2 := shared.ClickhouseClusterRequestInputUptimeSettingsScheduleMonRange{
		From: from1,
		To:   to1,
	}
	mon := shared.ClickhouseClusterRequestInputUptimeSettingsScheduleMon{
		Active: active1,
		AllDay: allDay1,
		Range:  range2,
	}
	active2 := r.UptimeSettings.Schedule.Sat.Active.ValueBool()
	allDay2 := r.UptimeSettings.Schedule.Sat.AllDay.ValueBool()
	from2 := r.UptimeSettings.Schedule.Sat.Range.From.ValueString()
	to2 := r.UptimeSettings.Schedule.Sat.Range.To.ValueString()
	range3 := shared.ClickhouseClusterRequestInputUptimeSettingsScheduleSatRange{
		From: from2,
		To:   to2,
	}
	sat := shared.ClickhouseClusterRequestInputUptimeSettingsScheduleSat{
		Active: active2,
		AllDay: allDay2,
		Range:  range3,
	}
	active3 := r.UptimeSettings.Schedule.Sun.Active.ValueBool()
	allDay3 := r.UptimeSettings.Schedule.Sun.AllDay.ValueBool()
	from3 := r.UptimeSettings.Schedule.Sun.Range.From.ValueString()
	to3 := r.UptimeSettings.Schedule.Sun.Range.To.ValueString()
	range4 := shared.ClickhouseClusterRequestInputUptimeSettingsScheduleSunRange{
		From: from3,
		To:   to3,
	}
	sun := shared.ClickhouseClusterRequestInputUptimeSettingsScheduleSun{
		Active: active3,
		AllDay: allDay3,
		Range:  range4,
	}
	active4 := r.UptimeSettings.Schedule.Thu.Active.ValueBool()
	allDay4 := r.UptimeSettings.Schedule.Thu.AllDay.ValueBool()
	from4 := r.UptimeSettings.Schedule.Thu.Range.From.ValueString()
	to4 := r.UptimeSettings.Schedule.Thu.Range.To.ValueString()
	range5 := shared.ClickhouseClusterRequestInputUptimeSettingsScheduleThuRange{
		From: from4,
		To:   to4,
	}
	thu := shared.ClickhouseClusterRequestInputUptimeSettingsScheduleThu{
		Active: active4,
		AllDay: allDay4,
		Range:  range5,
	}
	active5 := r.UptimeSettings.Schedule.Tue.Active.ValueBool()
	allDay5 := r.UptimeSettings.Schedule.Tue.AllDay.ValueBool()
	from5 := r.UptimeSettings.Schedule.Tue.Range.From.ValueString()
	to5 := r.UptimeSettings.Schedule.Tue.Range.To.ValueString()
	range6 := shared.ClickhouseClusterRequestInputUptimeSettingsScheduleTueRange{
		From: from5,
		To:   to5,
	}
	tue := shared.ClickhouseClusterRequestInputUptimeSettingsScheduleTue{
		Active: active5,
		AllDay: allDay5,
		Range:  range6,
	}
	active6 := r.UptimeSettings.Schedule.Wed.Active.ValueBool()
	allDay6 := r.UptimeSettings.Schedule.Wed.AllDay.ValueBool()
	from6 := r.UptimeSettings.Schedule.Wed.Range.From.ValueString()
	to6 := r.UptimeSettings.Schedule.Wed.Range.To.ValueString()
	range7 := shared.ClickhouseClusterRequestInputUptimeSettingsScheduleWedRange{
		From: from6,
		To:   to6,
	}
	wed := shared.ClickhouseClusterRequestInputUptimeSettingsScheduleWed{
		Active: active6,
		AllDay: allDay6,
		Range:  range7,
	}
	schedule1 := shared.ClickhouseClusterRequestInputUptimeSettingsSchedule{
		Fri: fri,
		Mon: mon,
		Sat: sat,
		Sun: sun,
		Thu: thu,
		Tue: tue,
		Wed: wed,
	}
	uptimeSettings := shared.ClickhouseClusterRequestInputUptimeSettings{
		InactiveHours: inactiveHours,
		Schedule:      schedule1,
	}
	version := r.Version.ValueString()
	versionImage := new(string)
	if !r.VersionImage.IsUnknown() && !r.VersionImage.IsNull() {
		*versionImage = r.VersionImage.ValueString()
	} else {
		versionImage = nil
	}
	zookeeper := r.Zookeeper.ValueString()
	root := r.ZookeeperOptions.Root.ValueString()
	size1 := r.ZookeeperOptions.Size.ValueString()
	tag := new(string)
	if !r.ZookeeperOptions.Tag.IsUnknown() && !r.ZookeeperOptions.Tag.IsNull() {
		*tag = r.ZookeeperOptions.Tag.ValueString()
	} else {
		tag = nil
	}
	zookeeperOptions := shared.ClickhouseClusterRequestInputZookeeperOptions{
		Root: root,
		Size: size1,
		Tag:  tag,
	}
	out := shared.ClickhouseClusterRequestInput{
		AdminPass:          adminPass,
		AdminUser:          adminUser,
		AlternateEndpoints: alternateEndpoints,
		Azlist:             azlist,
		BackupOptions:      backupOptions,
		DatadogSettings:    datadogSettings,
		Disks:              disks,
		DomainName:         domainName,
		Host:               host,
		HTTPPort:           httpPort,
		InternalDomainName: internalDomainName,
		IPWhitelist:        ipWhitelist,
		LbType:             lbType,
		Name:               name,
		NodeType:           nodeType,
		Nodes:              nodes,
		Port:               port,
		PublicEndpoint:     publicEndpoint,
		Region:             region1,
		Replicas:           replicas,
		ReplicateSchema:    replicateSchema,
		Secure:             secure,
		Shards:             shards,
		Size:               size,
		SSHPort:            sshPort,
		StorageClass:       storageClass,
		Type:               type1,
		Uptime:             uptime,
		UptimeSettings:     uptimeSettings,
		Version:            version,
		VersionImage:       versionImage,
		Zookeeper:          zookeeper,
		ZookeeperOptions:   zookeeperOptions,
	}
	return &out
}

func (r *ClickhouseClusterResourceModel) ToDeleteSDKType() *shared.ClickhouseClusterRequestInput {
	out := r.ToCreateSDKType()
	return out
}

func (r *ClickhouseClusterResourceModel) RefreshFromCreateResponse(resp *shared.ClickhouseClusterResponse) {
	r.AdminPass = types.StringValue(resp.AdminPass)
	r.AlertsSettings.Rescale.Email = types.BoolValue(resp.AlertsSettings.Rescale.Email)
	r.AlertsSettings.Rescale.Popup = types.BoolValue(resp.AlertsSettings.Rescale.Popup)
	r.AlertsSettings.Resume.Email = types.BoolValue(resp.AlertsSettings.Resume.Email)
	r.AlertsSettings.Resume.Popup = types.BoolValue(resp.AlertsSettings.Resume.Popup)
	r.AlertsSettings.Stop.Email = types.BoolValue(resp.AlertsSettings.Stop.Email)
	r.AlertsSettings.Stop.Popup = types.BoolValue(resp.AlertsSettings.Stop.Popup)
	r.AlertsSettings.Upgrade.Email = types.BoolValue(resp.AlertsSettings.Upgrade.Email)
	r.AlertsSettings.Upgrade.Popup = types.BoolValue(resp.AlertsSettings.Upgrade.Popup)
	r.AlternateEndpoints = nil
	for _, alternateEndpointsItem := range resp.AlternateEndpoints {
		var alternateEndpoints1 types.String
		alternateEndpoints1Result, _ := json.Marshal(alternateEndpointsItem)
		alternateEndpoints1 = types.StringValue(string(alternateEndpoints1Result))
		r.AlternateEndpoints = append(r.AlternateEndpoints, alternateEndpoints1)
	}
	r.AltinitySupport = types.StringValue(resp.AltinitySupport)
	r.BackupOptions.Bucket = types.StringValue(resp.BackupOptions.Bucket)
	r.BackupOptions.CompressionFormat = types.StringValue(resp.BackupOptions.CompressionFormat)
	r.BackupOptions.Day = types.Int64Value(resp.BackupOptions.Day)
	r.BackupOptions.Enable = types.BoolValue(resp.BackupOptions.Enable)
	r.BackupOptions.Keep = types.StringValue(resp.BackupOptions.Keep)
	if resp.BackupOptions.Path != nil {
		r.BackupOptions.Path = types.StringValue(*resp.BackupOptions.Path)
	} else {
		r.BackupOptions.Path = types.StringNull()
	}
	r.BackupOptions.Provider = types.StringValue(resp.BackupOptions.Provider)
	if resp.BackupOptions.Region != nil {
		r.BackupOptions.Region = types.StringValue(*resp.BackupOptions.Region)
	} else {
		r.BackupOptions.Region = types.StringNull()
	}
	r.BackupOptions.Schedule = types.StringValue(resp.BackupOptions.Schedule)
	r.BackupOptions.SecretKey = types.StringValue(resp.BackupOptions.SecretKey)
	r.BackupOptions.Settings = nil
	for _, settingsItem := range resp.BackupOptions.Settings {
		var settings1 ClickhouseClusterResponseBackupOptionsSettings
		settings1.Day = types.Int64Value(settingsItem.Day)
		settings1.Keep = types.Int64Value(settingsItem.Keep)
		settings1.Period = types.StringValue(settingsItem.Period)
		settings1.Time = types.StringValue(settingsItem.Time)
		r.BackupOptions.Settings = append(r.BackupOptions.Settings, settings1)
	}
	r.BackupOptions.Time = types.StringValue(resp.BackupOptions.Time)
	r.CanPublish = types.BoolValue(resp.CanPublish)
	r.CanRescale = types.BoolValue(resp.CanRescale)
	r.ClusterMonitoringURL = types.StringValue(resp.ClusterMonitoringURL)
	r.DatadogSettings.Logs = types.BoolValue(resp.DatadogSettings.Logs)
	r.DatadogSettings.Metrics = types.BoolValue(resp.DatadogSettings.Metrics)
	r.Environment.AutoPush = types.BoolValue(resp.Environment.AutoPush)
	r.Environment.AutoZkPush = types.StringValue(resp.Environment.AutoZkPush)
	r.Environment.AwsSettingsAuto = types.BoolValue(resp.Environment.AwsSettingsAuto)
	r.Environment.BackupOptions.Bucket = types.StringValue(resp.Environment.BackupOptions.Bucket)
	r.Environment.BackupOptions.CompressionFormat = types.StringValue(resp.Environment.BackupOptions.CompressionFormat)
	r.Environment.BackupOptions.Day = types.Int64Value(resp.Environment.BackupOptions.Day)
	r.Environment.BackupOptions.Enable = types.BoolValue(resp.Environment.BackupOptions.Enable)
	r.Environment.BackupOptions.Keep = types.StringValue(resp.Environment.BackupOptions.Keep)
	r.Environment.BackupOptions.Path = types.StringValue(resp.Environment.BackupOptions.Path)
	r.Environment.BackupOptions.Provider = types.StringValue(resp.Environment.BackupOptions.Provider)
	r.Environment.BackupOptions.Region = types.StringValue(resp.Environment.BackupOptions.Region)
	r.Environment.BackupOptions.Schedule = types.StringValue(resp.Environment.BackupOptions.Schedule)
	r.Environment.BackupOptions.SecretKey = types.StringValue(resp.Environment.BackupOptions.SecretKey)
	r.Environment.BackupOptions.Time = types.StringValue(resp.Environment.BackupOptions.Time)
	r.Environment.CoreCIDR = types.StringValue(resp.Environment.CoreCIDR)
	r.Environment.Created = types.StringValue(resp.Environment.Created)
	r.Environment.DashboardURL = types.StringValue(resp.Environment.DashboardURL)
	r.Environment.DatadogSettings.Enabled = types.BoolValue(resp.Environment.DatadogSettings.Enabled)
	r.Environment.DatadogSettings.Key = types.StringValue(resp.Environment.DatadogSettings.Key)
	r.Environment.DatadogSettings.Region = types.StringValue(resp.Environment.DatadogSettings.Region)
	r.Environment.Domain = types.StringValue(resp.Environment.Domain)
	r.Environment.ExternalDNS = types.StringValue(resp.Environment.ExternalDNS)
	r.Environment.ID = types.StringValue(resp.Environment.ID)
	r.Environment.IDOwner = types.StringValue(resp.Environment.IDOwner)
	r.Environment.IsAnywhere = types.BoolValue(resp.Environment.IsAnywhere)
	r.Environment.KubeAPIURL = types.StringValue(resp.Environment.KubeAPIURL)
	r.Environment.KubeAuthOptions.CaCert = types.StringValue(resp.Environment.KubeAuthOptions.CaCert)
	r.Environment.KubeAuthOptions.ClientCert = types.StringValue(resp.Environment.KubeAuthOptions.ClientCert)
	r.Environment.KubeAuthOptions.ClientKey = types.StringValue(resp.Environment.KubeAuthOptions.ClientKey)
	r.Environment.KubeAuthOptions.Type = types.StringValue(resp.Environment.KubeAuthOptions.Type)
	r.Environment.KubeCheck = types.StringValue(resp.Environment.KubeCheck)
	r.Environment.KubeCHOVersion = types.StringValue(resp.Environment.KubeCHOVersion)
	r.Environment.KubeLBType = types.StringValue(resp.Environment.KubeLBType)
	r.Environment.KubeManagedPVs = types.BoolValue(resp.Environment.KubeManagedPVs)
	r.Environment.KubeNamespace = types.StringValue(resp.Environment.KubeNamespace)
	r.Environment.KubeNamespaceManage = types.BoolValue(resp.Environment.KubeNamespaceManage)
	r.Environment.KubeProvider = types.StringValue(resp.Environment.KubeProvider)
	r.Environment.KubeStartupMode = types.StringValue(resp.Environment.KubeStartupMode)
	r.Environment.KubeToken = types.StringValue(resp.Environment.KubeToken)
	r.Environment.ListenCheck = types.StringValue(resp.Environment.ListenCheck)
	r.Environment.LogsStorage.Bucket = types.StringValue(resp.Environment.LogsStorage.Bucket)
	r.Environment.LogsStorage.Region = types.StringValue(resp.Environment.LogsStorage.Region)
	r.Environment.Monitoring = types.BoolValue(resp.Environment.Monitoring)
	r.Environment.MonitoringInfo.DbAltinityClickhouseOperatorDashboard.UID = types.StringValue(resp.Environment.MonitoringInfo.DbAltinityClickhouseOperatorDashboard.UID)
	r.Environment.MonitoringInfo.DbAltinityClickhouseOperatorDashboard.URL = types.StringValue(resp.Environment.MonitoringInfo.DbAltinityClickhouseOperatorDashboard.URL)
	r.Environment.MonitoringInfo.DbClickhouseInKubernetesQueries.UID = types.StringValue(resp.Environment.MonitoringInfo.DbClickhouseInKubernetesQueries.UID)
	r.Environment.MonitoringInfo.DbClickhouseInKubernetesQueries.URL = types.StringValue(resp.Environment.MonitoringInfo.DbClickhouseInKubernetesQueries.URL)
	r.Environment.MonitoringInfo.DbLogsDashboard.UID = types.StringValue(resp.Environment.MonitoringInfo.DbLogsDashboard.UID)
	r.Environment.MonitoringInfo.DbLogsDashboard.URL = types.StringValue(resp.Environment.MonitoringInfo.DbLogsDashboard.URL)
	r.Environment.MonitoringInfo.DbSystemLoad.UID = types.StringValue(resp.Environment.MonitoringInfo.DbSystemLoad.UID)
	r.Environment.MonitoringInfo.DbSystemLoad.URL = types.StringValue(resp.Environment.MonitoringInfo.DbSystemLoad.URL)
	r.Environment.MonitoringInfo.DbZookeeperDashboard.UID = types.StringValue(resp.Environment.MonitoringInfo.DbZookeeperDashboard.UID)
	r.Environment.MonitoringInfo.DbZookeeperDashboard.URL = types.StringValue(resp.Environment.MonitoringInfo.DbZookeeperDashboard.URL)
	r.Environment.MonitoringURL = types.StringValue(resp.Environment.MonitoringURL)
	r.Environment.Name = types.StringValue(resp.Environment.Name)
	r.Environment.Options.Azlist = nil
	for _, v := range resp.Environment.Options.Azlist {
		r.Environment.Options.Azlist = append(r.Environment.Options.Azlist, types.StringValue(v))
	}
	r.Environment.Options.Network = types.StringValue(resp.Environment.Options.Network)
	r.Environment.Options.SizeMultiplier = types.StringValue(resp.Environment.Options.SizeMultiplier)
	r.Environment.Pass = types.StringValue(resp.Environment.Pass)
	r.Environment.ResourceLimits.CPU = types.StringValue(resp.Environment.ResourceLimits.CPU)
	r.Environment.ResourceLimits.Memory = types.StringValue(resp.Environment.ResourceLimits.Memory)
	r.Environment.ResourceLimits.Nodes = types.Int64Value(resp.Environment.ResourceLimits.Nodes)
	r.Environment.ResourceLimits.Replicas = types.Int64Value(resp.Environment.ResourceLimits.Replicas)
	r.Environment.ResourceLimits.Shards = types.Int64Value(resp.Environment.ResourceLimits.Shards)
	r.Environment.ResourceLimits.Storage = types.StringValue(resp.Environment.ResourceLimits.Storage)
	r.Environment.ResourceLimits.VolumeRescale = types.Int64Value(resp.Environment.ResourceLimits.VolumeRescale)
	r.Environment.SniProxyForCH = types.BoolValue(resp.Environment.SniProxyForCH)
	r.Environment.SslCertificateARN = types.StringValue(resp.Environment.SslCertificateARN)
	r.Environment.Status = types.StringValue(resp.Environment.Status)
	r.Environment.Type = types.StringValue(resp.Environment.Type)
	r.Environment.User = types.StringValue(resp.Environment.User)
	r.Environment.VpcEndpoints = types.BoolValue(resp.Environment.VpcEndpoints)
	r.HasChanges = types.BoolValue(resp.HasChanges)
	r.HasMigration = types.BoolValue(resp.HasMigration)
	r.ID = types.StringValue(resp.ID)
	r.IDEnvironment = types.StringValue(resp.IDEnvironment)
	r.IDOwner = types.StringValue(resp.IDOwner)
	r.InitialAction.User = types.StringValue(resp.InitialAction.User)
	r.InitialAction.UserEmail = types.StringValue(resp.InitialAction.UserEmail)
	r.InitialAction.UserID = types.Int64Value(resp.InitialAction.UserID)
	r.InternalName = types.StringValue(resp.InternalName)
	r.Layouts.Replicated.AlertsSettings.Rescale.Email = types.BoolValue(resp.Layouts.Replicated.AlertsSettings.Rescale.Email)
	r.Layouts.Replicated.AlertsSettings.Rescale.Popup = types.BoolValue(resp.Layouts.Replicated.AlertsSettings.Rescale.Popup)
	r.Layouts.Replicated.AlertsSettings.Resume.Email = types.BoolValue(resp.Layouts.Replicated.AlertsSettings.Resume.Email)
	r.Layouts.Replicated.AlertsSettings.Resume.Popup = types.BoolValue(resp.Layouts.Replicated.AlertsSettings.Resume.Popup)
	r.Layouts.Replicated.AlertsSettings.Stop.Email = types.BoolValue(resp.Layouts.Replicated.AlertsSettings.Stop.Email)
	r.Layouts.Replicated.AlertsSettings.Stop.Popup = types.BoolValue(resp.Layouts.Replicated.AlertsSettings.Stop.Popup)
	r.Layouts.Replicated.AlertsSettings.Upgrade.Email = types.BoolValue(resp.Layouts.Replicated.AlertsSettings.Upgrade.Email)
	r.Layouts.Replicated.AlertsSettings.Upgrade.Popup = types.BoolValue(resp.Layouts.Replicated.AlertsSettings.Upgrade.Popup)
	r.Layouts.Replicated.AlternateEndpoints = nil
	for _, alternateEndpointsItem1 := range resp.Layouts.Replicated.AlternateEndpoints {
		var alternateEndpoints3 types.String
		alternateEndpoints3Result, _ := json.Marshal(alternateEndpointsItem1)
		alternateEndpoints3 = types.StringValue(string(alternateEndpoints3Result))
		r.Layouts.Replicated.AlternateEndpoints = append(r.Layouts.Replicated.AlternateEndpoints, alternateEndpoints3)
	}
	r.Layouts.Replicated.BackupOptions.Bucket = types.StringValue(resp.Layouts.Replicated.BackupOptions.Bucket)
	r.Layouts.Replicated.BackupOptions.CompressionFormat = types.StringValue(resp.Layouts.Replicated.BackupOptions.CompressionFormat)
	r.Layouts.Replicated.BackupOptions.Day = types.Int64Value(resp.Layouts.Replicated.BackupOptions.Day)
	r.Layouts.Replicated.BackupOptions.Enable = types.BoolValue(resp.Layouts.Replicated.BackupOptions.Enable)
	r.Layouts.Replicated.BackupOptions.Keep = types.StringValue(resp.Layouts.Replicated.BackupOptions.Keep)
	r.Layouts.Replicated.BackupOptions.Path = types.StringValue(resp.Layouts.Replicated.BackupOptions.Path)
	r.Layouts.Replicated.BackupOptions.Provider = types.StringValue(resp.Layouts.Replicated.BackupOptions.Provider)
	r.Layouts.Replicated.BackupOptions.Region = types.StringValue(resp.Layouts.Replicated.BackupOptions.Region)
	r.Layouts.Replicated.BackupOptions.Schedule = types.StringValue(resp.Layouts.Replicated.BackupOptions.Schedule)
	r.Layouts.Replicated.BackupOptions.SecretKey = types.StringValue(resp.Layouts.Replicated.BackupOptions.SecretKey)
	r.Layouts.Replicated.BackupOptions.Time = types.StringValue(resp.Layouts.Replicated.BackupOptions.Time)
	r.Layouts.Replicated.CanPublish = types.BoolValue(resp.Layouts.Replicated.CanPublish)
	r.Layouts.Replicated.CanRescale = types.BoolValue(resp.Layouts.Replicated.CanRescale)
	r.Layouts.Replicated.ClusterMonitoringURL = types.StringValue(resp.Layouts.Replicated.ClusterMonitoringURL)
	r.Layouts.Replicated.DatadogSettings.Logs = types.BoolValue(resp.Layouts.Replicated.DatadogSettings.Logs)
	r.Layouts.Replicated.DatadogSettings.Metrics = types.BoolValue(resp.Layouts.Replicated.DatadogSettings.Metrics)
	r.Layouts.Replicated.Environment.AutoPush = types.BoolValue(resp.Layouts.Replicated.Environment.AutoPush)
	r.Layouts.Replicated.Environment.AutoZkPush = types.StringValue(resp.Layouts.Replicated.Environment.AutoZkPush)
	r.Layouts.Replicated.Environment.AwsSettingsAuto = types.BoolValue(resp.Layouts.Replicated.Environment.AwsSettingsAuto)
	r.Layouts.Replicated.Environment.BackupOptions.Bucket = types.StringValue(resp.Layouts.Replicated.Environment.BackupOptions.Bucket)
	r.Layouts.Replicated.Environment.BackupOptions.CompressionFormat = types.StringValue(resp.Layouts.Replicated.Environment.BackupOptions.CompressionFormat)
	r.Layouts.Replicated.Environment.BackupOptions.Day = types.Int64Value(resp.Layouts.Replicated.Environment.BackupOptions.Day)
	r.Layouts.Replicated.Environment.BackupOptions.Enable = types.BoolValue(resp.Layouts.Replicated.Environment.BackupOptions.Enable)
	r.Layouts.Replicated.Environment.BackupOptions.Keep = types.StringValue(resp.Layouts.Replicated.Environment.BackupOptions.Keep)
	r.Layouts.Replicated.Environment.BackupOptions.Path = types.StringValue(resp.Layouts.Replicated.Environment.BackupOptions.Path)
	r.Layouts.Replicated.Environment.BackupOptions.Provider = types.StringValue(resp.Layouts.Replicated.Environment.BackupOptions.Provider)
	r.Layouts.Replicated.Environment.BackupOptions.Region = types.StringValue(resp.Layouts.Replicated.Environment.BackupOptions.Region)
	r.Layouts.Replicated.Environment.BackupOptions.Schedule = types.StringValue(resp.Layouts.Replicated.Environment.BackupOptions.Schedule)
	r.Layouts.Replicated.Environment.BackupOptions.SecretKey = types.StringValue(resp.Layouts.Replicated.Environment.BackupOptions.SecretKey)
	r.Layouts.Replicated.Environment.BackupOptions.Time = types.StringValue(resp.Layouts.Replicated.Environment.BackupOptions.Time)
	r.Layouts.Replicated.Environment.CoreCIDR = types.StringValue(resp.Layouts.Replicated.Environment.CoreCIDR)
	r.Layouts.Replicated.Environment.Created = types.StringValue(resp.Layouts.Replicated.Environment.Created)
	r.Layouts.Replicated.Environment.DashboardURL = types.StringValue(resp.Layouts.Replicated.Environment.DashboardURL)
	r.Layouts.Replicated.Environment.DatadogSettings.Enabled = types.BoolValue(resp.Layouts.Replicated.Environment.DatadogSettings.Enabled)
	r.Layouts.Replicated.Environment.DatadogSettings.Key = types.StringValue(resp.Layouts.Replicated.Environment.DatadogSettings.Key)
	r.Layouts.Replicated.Environment.DatadogSettings.Region = types.StringValue(resp.Layouts.Replicated.Environment.DatadogSettings.Region)
	r.Layouts.Replicated.Environment.Domain = types.StringValue(resp.Layouts.Replicated.Environment.Domain)
	r.Layouts.Replicated.Environment.ExternalDNS = types.StringValue(resp.Layouts.Replicated.Environment.ExternalDNS)
	r.Layouts.Replicated.Environment.ID = types.StringValue(resp.Layouts.Replicated.Environment.ID)
	r.Layouts.Replicated.Environment.IDOwner = types.StringValue(resp.Layouts.Replicated.Environment.IDOwner)
	r.Layouts.Replicated.Environment.IsAnywhere = types.BoolValue(resp.Layouts.Replicated.Environment.IsAnywhere)
	r.Layouts.Replicated.Environment.KubeAPIURL = types.StringValue(resp.Layouts.Replicated.Environment.KubeAPIURL)
	r.Layouts.Replicated.Environment.KubeAuthOptions.CaCert = types.StringValue(resp.Layouts.Replicated.Environment.KubeAuthOptions.CaCert)
	r.Layouts.Replicated.Environment.KubeAuthOptions.ClientCert = types.StringValue(resp.Layouts.Replicated.Environment.KubeAuthOptions.ClientCert)
	r.Layouts.Replicated.Environment.KubeAuthOptions.ClientKey = types.StringValue(resp.Layouts.Replicated.Environment.KubeAuthOptions.ClientKey)
	r.Layouts.Replicated.Environment.KubeAuthOptions.Type = types.StringValue(resp.Layouts.Replicated.Environment.KubeAuthOptions.Type)
	r.Layouts.Replicated.Environment.KubeCheck = types.StringValue(resp.Layouts.Replicated.Environment.KubeCheck)
	r.Layouts.Replicated.Environment.KubeCHOVersion = types.StringValue(resp.Layouts.Replicated.Environment.KubeCHOVersion)
	r.Layouts.Replicated.Environment.KubeLBType = types.StringValue(resp.Layouts.Replicated.Environment.KubeLBType)
	r.Layouts.Replicated.Environment.KubeManagedPVs = types.BoolValue(resp.Layouts.Replicated.Environment.KubeManagedPVs)
	r.Layouts.Replicated.Environment.KubeNamespace = types.StringValue(resp.Layouts.Replicated.Environment.KubeNamespace)
	r.Layouts.Replicated.Environment.KubeNamespaceManage = types.BoolValue(resp.Layouts.Replicated.Environment.KubeNamespaceManage)
	r.Layouts.Replicated.Environment.KubeProvider = types.StringValue(resp.Layouts.Replicated.Environment.KubeProvider)
	r.Layouts.Replicated.Environment.KubeStartupMode = types.StringValue(resp.Layouts.Replicated.Environment.KubeStartupMode)
	r.Layouts.Replicated.Environment.KubeToken = types.StringValue(resp.Layouts.Replicated.Environment.KubeToken)
	r.Layouts.Replicated.Environment.ListenCheck = types.StringValue(resp.Layouts.Replicated.Environment.ListenCheck)
	r.Layouts.Replicated.Environment.LogsStorage.Bucket = types.StringValue(resp.Layouts.Replicated.Environment.LogsStorage.Bucket)
	r.Layouts.Replicated.Environment.LogsStorage.Region = types.StringValue(resp.Layouts.Replicated.Environment.LogsStorage.Region)
	r.Layouts.Replicated.Environment.Monitoring = types.BoolValue(resp.Layouts.Replicated.Environment.Monitoring)
	r.Layouts.Replicated.Environment.MonitoringInfo.DbAltinityClickhouseOperatorDashboard.UID = types.StringValue(resp.Layouts.Replicated.Environment.MonitoringInfo.DbAltinityClickhouseOperatorDashboard.UID)
	r.Layouts.Replicated.Environment.MonitoringInfo.DbAltinityClickhouseOperatorDashboard.URL = types.StringValue(resp.Layouts.Replicated.Environment.MonitoringInfo.DbAltinityClickhouseOperatorDashboard.URL)
	r.Layouts.Replicated.Environment.MonitoringInfo.DbClickhouseInKubernetesQueries.UID = types.StringValue(resp.Layouts.Replicated.Environment.MonitoringInfo.DbClickhouseInKubernetesQueries.UID)
	r.Layouts.Replicated.Environment.MonitoringInfo.DbClickhouseInKubernetesQueries.URL = types.StringValue(resp.Layouts.Replicated.Environment.MonitoringInfo.DbClickhouseInKubernetesQueries.URL)
	r.Layouts.Replicated.Environment.MonitoringInfo.DbLogsDashboard.UID = types.StringValue(resp.Layouts.Replicated.Environment.MonitoringInfo.DbLogsDashboard.UID)
	r.Layouts.Replicated.Environment.MonitoringInfo.DbLogsDashboard.URL = types.StringValue(resp.Layouts.Replicated.Environment.MonitoringInfo.DbLogsDashboard.URL)
	r.Layouts.Replicated.Environment.MonitoringInfo.DbSystemLoad.UID = types.StringValue(resp.Layouts.Replicated.Environment.MonitoringInfo.DbSystemLoad.UID)
	r.Layouts.Replicated.Environment.MonitoringInfo.DbSystemLoad.URL = types.StringValue(resp.Layouts.Replicated.Environment.MonitoringInfo.DbSystemLoad.URL)
	r.Layouts.Replicated.Environment.MonitoringInfo.DbZookeeperDashboard.UID = types.StringValue(resp.Layouts.Replicated.Environment.MonitoringInfo.DbZookeeperDashboard.UID)
	r.Layouts.Replicated.Environment.MonitoringInfo.DbZookeeperDashboard.URL = types.StringValue(resp.Layouts.Replicated.Environment.MonitoringInfo.DbZookeeperDashboard.URL)
	r.Layouts.Replicated.Environment.MonitoringURL = types.StringValue(resp.Layouts.Replicated.Environment.MonitoringURL)
	r.Layouts.Replicated.Environment.Name = types.StringValue(resp.Layouts.Replicated.Environment.Name)
	r.Layouts.Replicated.Environment.Options.Azlist = nil
	for _, v := range resp.Layouts.Replicated.Environment.Options.Azlist {
		r.Layouts.Replicated.Environment.Options.Azlist = append(r.Layouts.Replicated.Environment.Options.Azlist, types.StringValue(v))
	}
	r.Layouts.Replicated.Environment.Options.Network = types.StringValue(resp.Layouts.Replicated.Environment.Options.Network)
	r.Layouts.Replicated.Environment.Options.SizeMultiplier = types.StringValue(resp.Layouts.Replicated.Environment.Options.SizeMultiplier)
	r.Layouts.Replicated.Environment.Pass = types.StringValue(resp.Layouts.Replicated.Environment.Pass)
	r.Layouts.Replicated.Environment.ResourceLimits.CPU = types.StringValue(resp.Layouts.Replicated.Environment.ResourceLimits.CPU)
	r.Layouts.Replicated.Environment.ResourceLimits.Memory = types.StringValue(resp.Layouts.Replicated.Environment.ResourceLimits.Memory)
	r.Layouts.Replicated.Environment.ResourceLimits.Nodes = types.Int64Value(resp.Layouts.Replicated.Environment.ResourceLimits.Nodes)
	r.Layouts.Replicated.Environment.ResourceLimits.Replicas = types.Int64Value(resp.Layouts.Replicated.Environment.ResourceLimits.Replicas)
	r.Layouts.Replicated.Environment.ResourceLimits.Shards = types.Int64Value(resp.Layouts.Replicated.Environment.ResourceLimits.Shards)
	r.Layouts.Replicated.Environment.ResourceLimits.Storage = types.StringValue(resp.Layouts.Replicated.Environment.ResourceLimits.Storage)
	r.Layouts.Replicated.Environment.ResourceLimits.VolumeRescale = types.Int64Value(resp.Layouts.Replicated.Environment.ResourceLimits.VolumeRescale)
	r.Layouts.Replicated.Environment.SniProxyForCH = types.BoolValue(resp.Layouts.Replicated.Environment.SniProxyForCH)
	r.Layouts.Replicated.Environment.SslCertificateARN = types.StringValue(resp.Layouts.Replicated.Environment.SslCertificateARN)
	r.Layouts.Replicated.Environment.Status = types.StringValue(resp.Layouts.Replicated.Environment.Status)
	r.Layouts.Replicated.Environment.Type = types.StringValue(resp.Layouts.Replicated.Environment.Type)
	r.Layouts.Replicated.Environment.User = types.StringValue(resp.Layouts.Replicated.Environment.User)
	r.Layouts.Replicated.Environment.VpcEndpoints = types.BoolValue(resp.Layouts.Replicated.Environment.VpcEndpoints)
	r.Layouts.Replicated.HasChanges = types.BoolValue(resp.Layouts.Replicated.HasChanges)
	r.Layouts.Replicated.HasMigration = types.BoolValue(resp.Layouts.Replicated.HasMigration)
	r.Layouts.Replicated.ID = types.StringValue(resp.Layouts.Replicated.ID)
	r.Layouts.Replicated.IDEnvironment = types.StringValue(resp.Layouts.Replicated.IDEnvironment)
	r.Layouts.Replicated.IDOwner = types.StringValue(resp.Layouts.Replicated.IDOwner)
	r.Layouts.Replicated.IDParent = types.StringValue(resp.Layouts.Replicated.IDParent)
	r.Layouts.Replicated.InitialAction.User = types.StringValue(resp.Layouts.Replicated.InitialAction.User)
	r.Layouts.Replicated.InitialAction.UserEmail = types.StringValue(resp.Layouts.Replicated.InitialAction.UserEmail)
	r.Layouts.Replicated.InitialAction.UserID = types.Int64Value(resp.Layouts.Replicated.InitialAction.UserID)
	r.Layouts.Replicated.InternalName = types.StringValue(resp.Layouts.Replicated.InternalName)
	r.Layouts.Replicated.Layouts = nil
	for _, layoutsItem := range resp.Layouts.Replicated.Layouts {
		var layouts2 types.String
		layouts2Result, _ := json.Marshal(layoutsItem)
		layouts2 = types.StringValue(string(layouts2Result))
		r.Layouts.Replicated.Layouts = append(r.Layouts.Replicated.Layouts, layouts2)
	}
	r.Layouts.Replicated.LogsMonitoringURL = types.StringValue(resp.Layouts.Replicated.LogsMonitoringURL)
	r.Layouts.Replicated.MigrationProgress = types.Int64Value(resp.Layouts.Replicated.MigrationProgress)
	r.Layouts.Replicated.MysqlProtocol = types.BoolValue(resp.Layouts.Replicated.MysqlProtocol)
	r.Layouts.Replicated.Name = types.StringValue(resp.Layouts.Replicated.Name)
	r.Layouts.Replicated.NormalizedName = types.StringValue(resp.Layouts.Replicated.NormalizedName)
	r.Layouts.Replicated.Owner.BackupTool = types.StringValue(resp.Layouts.Replicated.Owner.BackupTool)
	r.Layouts.Replicated.Owner.Blocked = types.BoolValue(resp.Layouts.Replicated.Owner.Blocked)
	r.Layouts.Replicated.Owner.DarkTheme = types.BoolValue(resp.Layouts.Replicated.Owner.DarkTheme)
	r.Layouts.Replicated.Owner.Email = types.StringValue(resp.Layouts.Replicated.Owner.Email)
	r.Layouts.Replicated.Owner.ID = types.StringValue(resp.Layouts.Replicated.Owner.ID)
	r.Layouts.Replicated.Owner.IDOrganization = types.StringValue(resp.Layouts.Replicated.Owner.IDOrganization)
	r.Layouts.Replicated.Owner.IDRole = types.StringValue(resp.Layouts.Replicated.Owner.IDRole)
	r.Layouts.Replicated.Owner.Name = types.StringValue(resp.Layouts.Replicated.Owner.Name)
	r.Layouts.Replicated.Owner.Organization.AutoCharge = types.BoolValue(resp.Layouts.Replicated.Owner.Organization.AutoCharge)
	r.Layouts.Replicated.Owner.Organization.Blocked = types.BoolValue(resp.Layouts.Replicated.Owner.Organization.Blocked)
	r.Layouts.Replicated.Owner.Organization.BlockedAPI = types.BoolValue(resp.Layouts.Replicated.Owner.Organization.BlockedAPI)
	r.Layouts.Replicated.Owner.Organization.BlockedPassword = types.BoolValue(resp.Layouts.Replicated.Owner.Organization.BlockedPassword)
	r.Layouts.Replicated.Owner.Organization.CompanyName = types.StringValue(resp.Layouts.Replicated.Owner.Organization.CompanyName)
	r.Layouts.Replicated.Owner.Organization.EmailDomain = types.StringValue(resp.Layouts.Replicated.Owner.Organization.EmailDomain)
	r.Layouts.Replicated.Owner.Organization.Expired = types.BoolValue(resp.Layouts.Replicated.Owner.Organization.Expired)
	r.Layouts.Replicated.Owner.Organization.ID = types.StringValue(resp.Layouts.Replicated.Owner.Organization.ID)
	r.Layouts.Replicated.Owner.Organization.IDDefaultUserRole = types.StringValue(resp.Layouts.Replicated.Owner.Organization.IDDefaultUserRole)
	r.Layouts.Replicated.Owner.Organization.IDOwner = types.StringValue(resp.Layouts.Replicated.Owner.Organization.IDOwner)
	r.Layouts.Replicated.Owner.Organization.Name = types.StringValue(resp.Layouts.Replicated.Owner.Organization.Name)
	r.Layouts.Replicated.Owner.Organization.Opened = types.BoolValue(resp.Layouts.Replicated.Owner.Organization.Opened)
	r.Layouts.Replicated.Owner.Organization.Trial = types.BoolValue(resp.Layouts.Replicated.Owner.Organization.Trial)
	r.Layouts.Replicated.Owner.Organization.TrialExpiry = types.StringValue(resp.Layouts.Replicated.Owner.Organization.TrialExpiry)
	r.Layouts.Replicated.Owner.Origins = types.StringValue(resp.Layouts.Replicated.Owner.Origins)
	r.Layouts.Replicated.Owner.Password = types.StringValue(resp.Layouts.Replicated.Owner.Password)
	r.Layouts.Replicated.Owner.Role.ID = types.StringValue(resp.Layouts.Replicated.Owner.Role.ID)
	r.Layouts.Replicated.Owner.Role.Name = types.StringValue(resp.Layouts.Replicated.Owner.Role.Name)
	r.Layouts.Replicated.Owner.Role.Rights = nil
	for _, rightsItem := range resp.Layouts.Replicated.Owner.Role.Rights {
		var rights1 ClickhouseClusterResponseLayoutsReplicatedOwnerRoleRights
		rights1.Access = types.StringValue(rightsItem.Access)
		rights1.Action = types.StringValue(rightsItem.Action)
		rights1.Class = types.StringValue(rightsItem.Class)
		r.Layouts.Replicated.Owner.Role.Rights = append(r.Layouts.Replicated.Owner.Role.Rights, rights1)
	}
	r.Layouts.Replicated.Owner.Role.System = types.BoolValue(resp.Layouts.Replicated.Owner.Role.System)
	r.Layouts.Replicated.QueryMonitoringURL = types.StringValue(resp.Layouts.Replicated.QueryMonitoringURL)
	r.Layouts.Replicated.Replicas = types.Int64Value(resp.Layouts.Replicated.Replicas)
	r.Layouts.Replicated.Secure = types.BoolValue(resp.Layouts.Replicated.Secure)
	r.Layouts.Replicated.Shards = types.Int64Value(resp.Layouts.Replicated.Shards)
	r.Layouts.Replicated.SystemMonitoringURL = types.StringValue(resp.Layouts.Replicated.SystemMonitoringURL)
	r.Layouts.Replicated.SystemVersion = types.StringValue(resp.Layouts.Replicated.SystemVersion)
	r.Layouts.Replicated.Uptime = types.StringValue(resp.Layouts.Replicated.Uptime)
	r.Layouts.Replicated.UptimeSettings = nil
	for _, uptimeSettingsItem := range resp.Layouts.Replicated.UptimeSettings {
		var uptimeSettings1 types.String
		uptimeSettings1Result, _ := json.Marshal(uptimeSettingsItem)
		uptimeSettings1 = types.StringValue(string(uptimeSettings1Result))
		r.Layouts.Replicated.UptimeSettings = append(r.Layouts.Replicated.UptimeSettings, uptimeSettings1)
	}
	r.Layouts.Replicated.Version = types.StringValue(resp.Layouts.Replicated.Version)
	r.Layouts.Sharded.AlertsSettings.Rescale.Email = types.BoolValue(resp.Layouts.Sharded.AlertsSettings.Rescale.Email)
	r.Layouts.Sharded.AlertsSettings.Rescale.Popup = types.BoolValue(resp.Layouts.Sharded.AlertsSettings.Rescale.Popup)
	r.Layouts.Sharded.AlertsSettings.Resume.Email = types.BoolValue(resp.Layouts.Sharded.AlertsSettings.Resume.Email)
	r.Layouts.Sharded.AlertsSettings.Resume.Popup = types.BoolValue(resp.Layouts.Sharded.AlertsSettings.Resume.Popup)
	r.Layouts.Sharded.AlertsSettings.Stop.Email = types.BoolValue(resp.Layouts.Sharded.AlertsSettings.Stop.Email)
	r.Layouts.Sharded.AlertsSettings.Stop.Popup = types.BoolValue(resp.Layouts.Sharded.AlertsSettings.Stop.Popup)
	r.Layouts.Sharded.AlertsSettings.Upgrade.Email = types.BoolValue(resp.Layouts.Sharded.AlertsSettings.Upgrade.Email)
	r.Layouts.Sharded.AlertsSettings.Upgrade.Popup = types.BoolValue(resp.Layouts.Sharded.AlertsSettings.Upgrade.Popup)
	r.Layouts.Sharded.AlternateEndpoints = nil
	for _, alternateEndpointsItem2 := range resp.Layouts.Sharded.AlternateEndpoints {
		var alternateEndpoints5 types.String
		alternateEndpoints5Result, _ := json.Marshal(alternateEndpointsItem2)
		alternateEndpoints5 = types.StringValue(string(alternateEndpoints5Result))
		r.Layouts.Sharded.AlternateEndpoints = append(r.Layouts.Sharded.AlternateEndpoints, alternateEndpoints5)
	}
	r.Layouts.Sharded.BackupOptions.Bucket = types.StringValue(resp.Layouts.Sharded.BackupOptions.Bucket)
	r.Layouts.Sharded.BackupOptions.CompressionFormat = types.StringValue(resp.Layouts.Sharded.BackupOptions.CompressionFormat)
	r.Layouts.Sharded.BackupOptions.Day = types.Int64Value(resp.Layouts.Sharded.BackupOptions.Day)
	r.Layouts.Sharded.BackupOptions.Enable = types.BoolValue(resp.Layouts.Sharded.BackupOptions.Enable)
	r.Layouts.Sharded.BackupOptions.Keep = types.StringValue(resp.Layouts.Sharded.BackupOptions.Keep)
	r.Layouts.Sharded.BackupOptions.Path = types.StringValue(resp.Layouts.Sharded.BackupOptions.Path)
	r.Layouts.Sharded.BackupOptions.Provider = types.StringValue(resp.Layouts.Sharded.BackupOptions.Provider)
	r.Layouts.Sharded.BackupOptions.Region = types.StringValue(resp.Layouts.Sharded.BackupOptions.Region)
	r.Layouts.Sharded.BackupOptions.Schedule = types.StringValue(resp.Layouts.Sharded.BackupOptions.Schedule)
	r.Layouts.Sharded.BackupOptions.SecretKey = types.StringValue(resp.Layouts.Sharded.BackupOptions.SecretKey)
	r.Layouts.Sharded.BackupOptions.Time = types.StringValue(resp.Layouts.Sharded.BackupOptions.Time)
	r.Layouts.Sharded.CanPublish = types.BoolValue(resp.Layouts.Sharded.CanPublish)
	r.Layouts.Sharded.CanRescale = types.BoolValue(resp.Layouts.Sharded.CanRescale)
	r.Layouts.Sharded.ClusterMonitoringURL = types.StringValue(resp.Layouts.Sharded.ClusterMonitoringURL)
	r.Layouts.Sharded.DatadogSettings.Logs = types.BoolValue(resp.Layouts.Sharded.DatadogSettings.Logs)
	r.Layouts.Sharded.DatadogSettings.Metrics = types.BoolValue(resp.Layouts.Sharded.DatadogSettings.Metrics)
	r.Layouts.Sharded.Environment.AutoPush = types.BoolValue(resp.Layouts.Sharded.Environment.AutoPush)
	r.Layouts.Sharded.Environment.AutoZkPush = types.StringValue(resp.Layouts.Sharded.Environment.AutoZkPush)
	r.Layouts.Sharded.Environment.AwsSettingsAuto = types.BoolValue(resp.Layouts.Sharded.Environment.AwsSettingsAuto)
	r.Layouts.Sharded.Environment.BackupOptions.Bucket = types.StringValue(resp.Layouts.Sharded.Environment.BackupOptions.Bucket)
	r.Layouts.Sharded.Environment.BackupOptions.CompressionFormat = types.StringValue(resp.Layouts.Sharded.Environment.BackupOptions.CompressionFormat)
	r.Layouts.Sharded.Environment.BackupOptions.Day = types.Int64Value(resp.Layouts.Sharded.Environment.BackupOptions.Day)
	r.Layouts.Sharded.Environment.BackupOptions.Enable = types.BoolValue(resp.Layouts.Sharded.Environment.BackupOptions.Enable)
	r.Layouts.Sharded.Environment.BackupOptions.Keep = types.StringValue(resp.Layouts.Sharded.Environment.BackupOptions.Keep)
	r.Layouts.Sharded.Environment.BackupOptions.Path = types.StringValue(resp.Layouts.Sharded.Environment.BackupOptions.Path)
	r.Layouts.Sharded.Environment.BackupOptions.Provider = types.StringValue(resp.Layouts.Sharded.Environment.BackupOptions.Provider)
	r.Layouts.Sharded.Environment.BackupOptions.Region = types.StringValue(resp.Layouts.Sharded.Environment.BackupOptions.Region)
	r.Layouts.Sharded.Environment.BackupOptions.Schedule = types.StringValue(resp.Layouts.Sharded.Environment.BackupOptions.Schedule)
	r.Layouts.Sharded.Environment.BackupOptions.SecretKey = types.StringValue(resp.Layouts.Sharded.Environment.BackupOptions.SecretKey)
	r.Layouts.Sharded.Environment.BackupOptions.Time = types.StringValue(resp.Layouts.Sharded.Environment.BackupOptions.Time)
	r.Layouts.Sharded.Environment.CoreCIDR = types.StringValue(resp.Layouts.Sharded.Environment.CoreCIDR)
	r.Layouts.Sharded.Environment.Created = types.StringValue(resp.Layouts.Sharded.Environment.Created)
	r.Layouts.Sharded.Environment.DashboardURL = types.StringValue(resp.Layouts.Sharded.Environment.DashboardURL)
	r.Layouts.Sharded.Environment.DatadogSettings.Enabled = types.BoolValue(resp.Layouts.Sharded.Environment.DatadogSettings.Enabled)
	r.Layouts.Sharded.Environment.DatadogSettings.Key = types.StringValue(resp.Layouts.Sharded.Environment.DatadogSettings.Key)
	r.Layouts.Sharded.Environment.DatadogSettings.Region = types.StringValue(resp.Layouts.Sharded.Environment.DatadogSettings.Region)
	r.Layouts.Sharded.Environment.Domain = types.StringValue(resp.Layouts.Sharded.Environment.Domain)
	r.Layouts.Sharded.Environment.ExternalDNS = types.StringValue(resp.Layouts.Sharded.Environment.ExternalDNS)
	r.Layouts.Sharded.Environment.ID = types.StringValue(resp.Layouts.Sharded.Environment.ID)
	r.Layouts.Sharded.Environment.IDOwner = types.StringValue(resp.Layouts.Sharded.Environment.IDOwner)
	r.Layouts.Sharded.Environment.IsAnywhere = types.BoolValue(resp.Layouts.Sharded.Environment.IsAnywhere)
	r.Layouts.Sharded.Environment.KubeAPIURL = types.StringValue(resp.Layouts.Sharded.Environment.KubeAPIURL)
	r.Layouts.Sharded.Environment.KubeAuthOptions.CaCert = types.StringValue(resp.Layouts.Sharded.Environment.KubeAuthOptions.CaCert)
	r.Layouts.Sharded.Environment.KubeAuthOptions.ClientCert = types.StringValue(resp.Layouts.Sharded.Environment.KubeAuthOptions.ClientCert)
	r.Layouts.Sharded.Environment.KubeAuthOptions.ClientKey = types.StringValue(resp.Layouts.Sharded.Environment.KubeAuthOptions.ClientKey)
	r.Layouts.Sharded.Environment.KubeAuthOptions.Type = types.StringValue(resp.Layouts.Sharded.Environment.KubeAuthOptions.Type)
	r.Layouts.Sharded.Environment.KubeCheck = types.StringValue(resp.Layouts.Sharded.Environment.KubeCheck)
	r.Layouts.Sharded.Environment.KubeCHOVersion = types.StringValue(resp.Layouts.Sharded.Environment.KubeCHOVersion)
	r.Layouts.Sharded.Environment.KubeLBType = types.StringValue(resp.Layouts.Sharded.Environment.KubeLBType)
	r.Layouts.Sharded.Environment.KubeManagedPVs = types.BoolValue(resp.Layouts.Sharded.Environment.KubeManagedPVs)
	r.Layouts.Sharded.Environment.KubeNamespace = types.StringValue(resp.Layouts.Sharded.Environment.KubeNamespace)
	r.Layouts.Sharded.Environment.KubeNamespaceManage = types.BoolValue(resp.Layouts.Sharded.Environment.KubeNamespaceManage)
	r.Layouts.Sharded.Environment.KubeProvider = types.StringValue(resp.Layouts.Sharded.Environment.KubeProvider)
	r.Layouts.Sharded.Environment.KubeStartupMode = types.StringValue(resp.Layouts.Sharded.Environment.KubeStartupMode)
	r.Layouts.Sharded.Environment.KubeToken = types.StringValue(resp.Layouts.Sharded.Environment.KubeToken)
	r.Layouts.Sharded.Environment.ListenCheck = types.StringValue(resp.Layouts.Sharded.Environment.ListenCheck)
	r.Layouts.Sharded.Environment.LogsStorage.Bucket = types.StringValue(resp.Layouts.Sharded.Environment.LogsStorage.Bucket)
	r.Layouts.Sharded.Environment.LogsStorage.Region = types.StringValue(resp.Layouts.Sharded.Environment.LogsStorage.Region)
	r.Layouts.Sharded.Environment.Monitoring = types.BoolValue(resp.Layouts.Sharded.Environment.Monitoring)
	r.Layouts.Sharded.Environment.MonitoringInfo.DbAltinityClickhouseOperatorDashboard.UID = types.StringValue(resp.Layouts.Sharded.Environment.MonitoringInfo.DbAltinityClickhouseOperatorDashboard.UID)
	r.Layouts.Sharded.Environment.MonitoringInfo.DbAltinityClickhouseOperatorDashboard.URL = types.StringValue(resp.Layouts.Sharded.Environment.MonitoringInfo.DbAltinityClickhouseOperatorDashboard.URL)
	r.Layouts.Sharded.Environment.MonitoringInfo.DbClickhouseInKubernetesQueries.UID = types.StringValue(resp.Layouts.Sharded.Environment.MonitoringInfo.DbClickhouseInKubernetesQueries.UID)
	r.Layouts.Sharded.Environment.MonitoringInfo.DbClickhouseInKubernetesQueries.URL = types.StringValue(resp.Layouts.Sharded.Environment.MonitoringInfo.DbClickhouseInKubernetesQueries.URL)
	r.Layouts.Sharded.Environment.MonitoringInfo.DbLogsDashboard.UID = types.StringValue(resp.Layouts.Sharded.Environment.MonitoringInfo.DbLogsDashboard.UID)
	r.Layouts.Sharded.Environment.MonitoringInfo.DbLogsDashboard.URL = types.StringValue(resp.Layouts.Sharded.Environment.MonitoringInfo.DbLogsDashboard.URL)
	r.Layouts.Sharded.Environment.MonitoringInfo.DbSystemLoad.UID = types.StringValue(resp.Layouts.Sharded.Environment.MonitoringInfo.DbSystemLoad.UID)
	r.Layouts.Sharded.Environment.MonitoringInfo.DbSystemLoad.URL = types.StringValue(resp.Layouts.Sharded.Environment.MonitoringInfo.DbSystemLoad.URL)
	r.Layouts.Sharded.Environment.MonitoringInfo.DbZookeeperDashboard.UID = types.StringValue(resp.Layouts.Sharded.Environment.MonitoringInfo.DbZookeeperDashboard.UID)
	r.Layouts.Sharded.Environment.MonitoringInfo.DbZookeeperDashboard.URL = types.StringValue(resp.Layouts.Sharded.Environment.MonitoringInfo.DbZookeeperDashboard.URL)
	r.Layouts.Sharded.Environment.MonitoringURL = types.StringValue(resp.Layouts.Sharded.Environment.MonitoringURL)
	r.Layouts.Sharded.Environment.Name = types.StringValue(resp.Layouts.Sharded.Environment.Name)
	r.Layouts.Sharded.Environment.Options.Azlist = nil
	for _, v := range resp.Layouts.Sharded.Environment.Options.Azlist {
		r.Layouts.Sharded.Environment.Options.Azlist = append(r.Layouts.Sharded.Environment.Options.Azlist, types.StringValue(v))
	}
	r.Layouts.Sharded.Environment.Options.Network = types.StringValue(resp.Layouts.Sharded.Environment.Options.Network)
	r.Layouts.Sharded.Environment.Options.SizeMultiplier = types.StringValue(resp.Layouts.Sharded.Environment.Options.SizeMultiplier)
	r.Layouts.Sharded.Environment.Pass = types.StringValue(resp.Layouts.Sharded.Environment.Pass)
	r.Layouts.Sharded.Environment.ResourceLimits.CPU = types.StringValue(resp.Layouts.Sharded.Environment.ResourceLimits.CPU)
	r.Layouts.Sharded.Environment.ResourceLimits.Memory = types.StringValue(resp.Layouts.Sharded.Environment.ResourceLimits.Memory)
	r.Layouts.Sharded.Environment.ResourceLimits.Nodes = types.Int64Value(resp.Layouts.Sharded.Environment.ResourceLimits.Nodes)
	r.Layouts.Sharded.Environment.ResourceLimits.Replicas = types.Int64Value(resp.Layouts.Sharded.Environment.ResourceLimits.Replicas)
	r.Layouts.Sharded.Environment.ResourceLimits.Shards = types.Int64Value(resp.Layouts.Sharded.Environment.ResourceLimits.Shards)
	r.Layouts.Sharded.Environment.ResourceLimits.Storage = types.StringValue(resp.Layouts.Sharded.Environment.ResourceLimits.Storage)
	r.Layouts.Sharded.Environment.ResourceLimits.VolumeRescale = types.Int64Value(resp.Layouts.Sharded.Environment.ResourceLimits.VolumeRescale)
	r.Layouts.Sharded.Environment.SniProxyForCH = types.BoolValue(resp.Layouts.Sharded.Environment.SniProxyForCH)
	r.Layouts.Sharded.Environment.SslCertificateARN = types.StringValue(resp.Layouts.Sharded.Environment.SslCertificateARN)
	r.Layouts.Sharded.Environment.Status = types.StringValue(resp.Layouts.Sharded.Environment.Status)
	r.Layouts.Sharded.Environment.Type = types.StringValue(resp.Layouts.Sharded.Environment.Type)
	r.Layouts.Sharded.Environment.User = types.StringValue(resp.Layouts.Sharded.Environment.User)
	r.Layouts.Sharded.Environment.VpcEndpoints = types.BoolValue(resp.Layouts.Sharded.Environment.VpcEndpoints)
	r.Layouts.Sharded.HasChanges = types.BoolValue(resp.Layouts.Sharded.HasChanges)
	r.Layouts.Sharded.HasMigration = types.BoolValue(resp.Layouts.Sharded.HasMigration)
	r.Layouts.Sharded.ID = types.StringValue(resp.Layouts.Sharded.ID)
	r.Layouts.Sharded.IDEnvironment = types.StringValue(resp.Layouts.Sharded.IDEnvironment)
	r.Layouts.Sharded.IDOwner = types.StringValue(resp.Layouts.Sharded.IDOwner)
	r.Layouts.Sharded.IDParent = types.StringValue(resp.Layouts.Sharded.IDParent)
	r.Layouts.Sharded.InitialAction.User = types.StringValue(resp.Layouts.Sharded.InitialAction.User)
	r.Layouts.Sharded.InitialAction.UserEmail = types.StringValue(resp.Layouts.Sharded.InitialAction.UserEmail)
	r.Layouts.Sharded.InitialAction.UserID = types.Int64Value(resp.Layouts.Sharded.InitialAction.UserID)
	r.Layouts.Sharded.InternalName = types.StringValue(resp.Layouts.Sharded.InternalName)
	r.Layouts.Sharded.Layouts = nil
	for _, layoutsItem1 := range resp.Layouts.Sharded.Layouts {
		var layouts4 types.String
		layouts4Result, _ := json.Marshal(layoutsItem1)
		layouts4 = types.StringValue(string(layouts4Result))
		r.Layouts.Sharded.Layouts = append(r.Layouts.Sharded.Layouts, layouts4)
	}
	r.Layouts.Sharded.LogsMonitoringURL = types.StringValue(resp.Layouts.Sharded.LogsMonitoringURL)
	r.Layouts.Sharded.MigrationProgress = types.Int64Value(resp.Layouts.Sharded.MigrationProgress)
	r.Layouts.Sharded.MysqlProtocol = types.BoolValue(resp.Layouts.Sharded.MysqlProtocol)
	r.Layouts.Sharded.Name = types.StringValue(resp.Layouts.Sharded.Name)
	r.Layouts.Sharded.Nodes = nil
	for _, nodesItem := range resp.Layouts.Sharded.Nodes {
		var nodes4 types.String
		nodes4Result, _ := json.Marshal(nodesItem)
		nodes4 = types.StringValue(string(nodes4Result))
		r.Layouts.Sharded.Nodes = append(r.Layouts.Sharded.Nodes, nodes4)
	}
	r.Layouts.Sharded.NormalizedName = types.StringValue(resp.Layouts.Sharded.NormalizedName)
	r.Layouts.Sharded.Owner.BackupTool = types.StringValue(resp.Layouts.Sharded.Owner.BackupTool)
	r.Layouts.Sharded.Owner.Blocked = types.BoolValue(resp.Layouts.Sharded.Owner.Blocked)
	r.Layouts.Sharded.Owner.DarkTheme = types.BoolValue(resp.Layouts.Sharded.Owner.DarkTheme)
	r.Layouts.Sharded.Owner.Email = types.StringValue(resp.Layouts.Sharded.Owner.Email)
	r.Layouts.Sharded.Owner.ID = types.StringValue(resp.Layouts.Sharded.Owner.ID)
	r.Layouts.Sharded.Owner.IDOrganization = types.StringValue(resp.Layouts.Sharded.Owner.IDOrganization)
	r.Layouts.Sharded.Owner.IDRole = types.StringValue(resp.Layouts.Sharded.Owner.IDRole)
	r.Layouts.Sharded.Owner.Name = types.StringValue(resp.Layouts.Sharded.Owner.Name)
	r.Layouts.Sharded.Owner.Organization.AutoCharge = types.BoolValue(resp.Layouts.Sharded.Owner.Organization.AutoCharge)
	r.Layouts.Sharded.Owner.Organization.Blocked = types.BoolValue(resp.Layouts.Sharded.Owner.Organization.Blocked)
	r.Layouts.Sharded.Owner.Organization.BlockedAPI = types.BoolValue(resp.Layouts.Sharded.Owner.Organization.BlockedAPI)
	r.Layouts.Sharded.Owner.Organization.BlockedPassword = types.BoolValue(resp.Layouts.Sharded.Owner.Organization.BlockedPassword)
	r.Layouts.Sharded.Owner.Organization.CompanyName = types.StringValue(resp.Layouts.Sharded.Owner.Organization.CompanyName)
	r.Layouts.Sharded.Owner.Organization.EmailDomain = types.StringValue(resp.Layouts.Sharded.Owner.Organization.EmailDomain)
	r.Layouts.Sharded.Owner.Organization.Expired = types.BoolValue(resp.Layouts.Sharded.Owner.Organization.Expired)
	r.Layouts.Sharded.Owner.Organization.ID = types.StringValue(resp.Layouts.Sharded.Owner.Organization.ID)
	r.Layouts.Sharded.Owner.Organization.IDDefaultUserRole = types.StringValue(resp.Layouts.Sharded.Owner.Organization.IDDefaultUserRole)
	r.Layouts.Sharded.Owner.Organization.IDOwner = types.StringValue(resp.Layouts.Sharded.Owner.Organization.IDOwner)
	r.Layouts.Sharded.Owner.Organization.Name = types.StringValue(resp.Layouts.Sharded.Owner.Organization.Name)
	r.Layouts.Sharded.Owner.Organization.Opened = types.BoolValue(resp.Layouts.Sharded.Owner.Organization.Opened)
	r.Layouts.Sharded.Owner.Organization.Trial = types.BoolValue(resp.Layouts.Sharded.Owner.Organization.Trial)
	r.Layouts.Sharded.Owner.Organization.TrialExpiry = types.StringValue(resp.Layouts.Sharded.Owner.Organization.TrialExpiry)
	r.Layouts.Sharded.Owner.Origins = types.StringValue(resp.Layouts.Sharded.Owner.Origins)
	r.Layouts.Sharded.Owner.Password = types.StringValue(resp.Layouts.Sharded.Owner.Password)
	r.Layouts.Sharded.Owner.Role.ID = types.StringValue(resp.Layouts.Sharded.Owner.Role.ID)
	r.Layouts.Sharded.Owner.Role.Name = types.StringValue(resp.Layouts.Sharded.Owner.Role.Name)
	r.Layouts.Sharded.Owner.Role.Rights = nil
	for _, rightsItem1 := range resp.Layouts.Sharded.Owner.Role.Rights {
		var rights3 ClickhouseClusterResponseLayoutsReplicatedOwnerRoleRights
		rights3.Access = types.StringValue(rightsItem1.Access)
		rights3.Action = types.StringValue(rightsItem1.Action)
		rights3.Class = types.StringValue(rightsItem1.Class)
		r.Layouts.Sharded.Owner.Role.Rights = append(r.Layouts.Sharded.Owner.Role.Rights, rights3)
	}
	r.Layouts.Sharded.Owner.Role.System = types.BoolValue(resp.Layouts.Sharded.Owner.Role.System)
	r.Layouts.Sharded.QueryMonitoringURL = types.StringValue(resp.Layouts.Sharded.QueryMonitoringURL)
	r.Layouts.Sharded.Replicas = types.Int64Value(resp.Layouts.Sharded.Replicas)
	r.Layouts.Sharded.Secure = types.BoolValue(resp.Layouts.Sharded.Secure)
	r.Layouts.Sharded.Shards = types.Int64Value(resp.Layouts.Sharded.Shards)
	r.Layouts.Sharded.SystemMonitoringURL = types.StringValue(resp.Layouts.Sharded.SystemMonitoringURL)
	r.Layouts.Sharded.SystemVersion = types.StringValue(resp.Layouts.Sharded.SystemVersion)
	r.Layouts.Sharded.Uptime = types.StringValue(resp.Layouts.Sharded.Uptime)
	r.Layouts.Sharded.UptimeSettings = nil
	for _, uptimeSettingsItem1 := range resp.Layouts.Sharded.UptimeSettings {
		var uptimeSettings3 types.String
		uptimeSettings3Result, _ := json.Marshal(uptimeSettingsItem1)
		uptimeSettings3 = types.StringValue(string(uptimeSettings3Result))
		r.Layouts.Sharded.UptimeSettings = append(r.Layouts.Sharded.UptimeSettings, uptimeSettings3)
	}
	r.Layouts.Sharded.Version = types.StringValue(resp.Layouts.Sharded.Version)
	r.LogsMonitoringURL = types.StringValue(resp.LogsMonitoringURL)
	r.MigrationProgress = types.Int64Value(resp.MigrationProgress)
	r.MysqlProtocol = types.BoolValue(resp.MysqlProtocol)
	r.Name = types.StringValue(resp.Name)
	r.NormalizedName = types.StringValue(resp.NormalizedName)
	r.Options.AcmHost = types.StringValue(resp.Options.AcmHost)
	r.Options.Azlist = nil
	for _, v := range resp.Options.Azlist {
		r.Options.Azlist = append(r.Options.Azlist, types.StringValue(v))
	}
	r.Options.CPU = types.StringValue(resp.Options.CPU)
	r.Options.Disks = types.Int64Value(resp.Options.Disks)
	r.Options.IPWhitelist = types.StringValue(resp.Options.IPWhitelist)
	r.Options.LbType = types.StringValue(resp.Options.LbType)
	r.Options.ManagedPVs = types.BoolValue(resp.Options.ManagedPVs)
	r.Options.Memory = types.StringValue(resp.Options.Memory)
	r.Options.Region = types.StringValue(resp.Options.Region)
	r.Options.Size = types.Int64Value(resp.Options.Size)
	r.Options.Static = types.BoolValue(resp.Options.Static)
	r.Options.StorageClass = types.StringValue(resp.Options.StorageClass)
	r.Options.Type = types.StringValue(resp.Options.Type)
	r.Options.Version = types.StringValue(resp.Options.Version)
	r.Options.ZkRoot = types.BoolValue(resp.Options.ZkRoot)
	r.Owner.BackupTool = types.StringValue(resp.Owner.BackupTool)
	r.Owner.Blocked = types.BoolValue(resp.Owner.Blocked)
	r.Owner.DarkTheme = types.BoolValue(resp.Owner.DarkTheme)
	r.Owner.Email = types.StringValue(resp.Owner.Email)
	r.Owner.ID = types.StringValue(resp.Owner.ID)
	r.Owner.IDOrganization = types.StringValue(resp.Owner.IDOrganization)
	r.Owner.IDRole = types.StringValue(resp.Owner.IDRole)
	r.Owner.Name = types.StringValue(resp.Owner.Name)
	r.Owner.Organization.AutoCharge = types.BoolValue(resp.Owner.Organization.AutoCharge)
	r.Owner.Organization.Blocked = types.BoolValue(resp.Owner.Organization.Blocked)
	r.Owner.Organization.BlockedAPI = types.BoolValue(resp.Owner.Organization.BlockedAPI)
	r.Owner.Organization.BlockedPassword = types.BoolValue(resp.Owner.Organization.BlockedPassword)
	r.Owner.Organization.CompanyName = types.StringValue(resp.Owner.Organization.CompanyName)
	r.Owner.Organization.EmailDomain = types.StringValue(resp.Owner.Organization.EmailDomain)
	r.Owner.Organization.Expired = types.BoolValue(resp.Owner.Organization.Expired)
	r.Owner.Organization.ID = types.StringValue(resp.Owner.Organization.ID)
	r.Owner.Organization.IDDefaultUserRole = types.StringValue(resp.Owner.Organization.IDDefaultUserRole)
	r.Owner.Organization.IDOwner = types.StringValue(resp.Owner.Organization.IDOwner)
	r.Owner.Organization.Name = types.StringValue(resp.Owner.Organization.Name)
	r.Owner.Organization.Opened = types.BoolValue(resp.Owner.Organization.Opened)
	r.Owner.Organization.Trial = types.BoolValue(resp.Owner.Organization.Trial)
	r.Owner.Organization.TrialExpiry = types.StringValue(resp.Owner.Organization.TrialExpiry)
	r.Owner.Origins = types.StringValue(resp.Owner.Origins)
	r.Owner.Password = types.StringValue(resp.Owner.Password)
	r.Owner.Role.ID = types.StringValue(resp.Owner.Role.ID)
	r.Owner.Role.Name = types.StringValue(resp.Owner.Role.Name)
	r.Owner.Role.Rights = nil
	for _, rightsItem2 := range resp.Owner.Role.Rights {
		var rights5 ClickhouseClusterResponseLayoutsReplicatedOwnerRoleRights
		rights5.Access = types.StringValue(rightsItem2.Access)
		rights5.Action = types.StringValue(rightsItem2.Action)
		rights5.Class = types.StringValue(rightsItem2.Class)
		r.Owner.Role.Rights = append(r.Owner.Role.Rights, rights5)
	}
	r.Owner.Role.System = types.BoolValue(resp.Owner.Role.System)
	r.QueryMonitoringURL = types.StringValue(resp.QueryMonitoringURL)
	r.Secure = types.BoolValue(resp.Secure)
	r.StartupMode = types.StringValue(resp.StartupMode)
	r.Status = types.StringValue(resp.Status)
	r.SystemMonitoringURL = types.StringValue(resp.SystemMonitoringURL)
	r.SystemVersion = types.StringValue(resp.SystemVersion)
	r.Uptime = types.StringValue(resp.Uptime)
	r.UptimeSettings.InactiveHours = types.Int64Value(resp.UptimeSettings.InactiveHours)
	r.UptimeSettings.Schedule.Fri.Active = types.BoolValue(resp.UptimeSettings.Schedule.Fri.Active)
	r.UptimeSettings.Schedule.Fri.AllDay = types.BoolValue(resp.UptimeSettings.Schedule.Fri.AllDay)
	r.UptimeSettings.Schedule.Fri.Range.From = types.StringValue(resp.UptimeSettings.Schedule.Fri.Range.From)
	r.UptimeSettings.Schedule.Fri.Range.To = types.StringValue(resp.UptimeSettings.Schedule.Fri.Range.To)
	r.UptimeSettings.Schedule.Mon.Active = types.BoolValue(resp.UptimeSettings.Schedule.Mon.Active)
	r.UptimeSettings.Schedule.Mon.AllDay = types.BoolValue(resp.UptimeSettings.Schedule.Mon.AllDay)
	r.UptimeSettings.Schedule.Mon.Range.From = types.StringValue(resp.UptimeSettings.Schedule.Mon.Range.From)
	r.UptimeSettings.Schedule.Mon.Range.To = types.StringValue(resp.UptimeSettings.Schedule.Mon.Range.To)
	r.UptimeSettings.Schedule.Sat.Active = types.BoolValue(resp.UptimeSettings.Schedule.Sat.Active)
	r.UptimeSettings.Schedule.Sat.AllDay = types.BoolValue(resp.UptimeSettings.Schedule.Sat.AllDay)
	r.UptimeSettings.Schedule.Sat.Range.From = types.StringValue(resp.UptimeSettings.Schedule.Sat.Range.From)
	r.UptimeSettings.Schedule.Sat.Range.To = types.StringValue(resp.UptimeSettings.Schedule.Sat.Range.To)
	r.UptimeSettings.Schedule.Sun.Active = types.BoolValue(resp.UptimeSettings.Schedule.Sun.Active)
	r.UptimeSettings.Schedule.Sun.AllDay = types.BoolValue(resp.UptimeSettings.Schedule.Sun.AllDay)
	r.UptimeSettings.Schedule.Sun.Range.From = types.StringValue(resp.UptimeSettings.Schedule.Sun.Range.From)
	r.UptimeSettings.Schedule.Sun.Range.To = types.StringValue(resp.UptimeSettings.Schedule.Sun.Range.To)
	r.UptimeSettings.Schedule.Thu.Active = types.BoolValue(resp.UptimeSettings.Schedule.Thu.Active)
	r.UptimeSettings.Schedule.Thu.AllDay = types.BoolValue(resp.UptimeSettings.Schedule.Thu.AllDay)
	r.UptimeSettings.Schedule.Thu.Range.From = types.StringValue(resp.UptimeSettings.Schedule.Thu.Range.From)
	r.UptimeSettings.Schedule.Thu.Range.To = types.StringValue(resp.UptimeSettings.Schedule.Thu.Range.To)
	r.UptimeSettings.Schedule.Tue.Active = types.BoolValue(resp.UptimeSettings.Schedule.Tue.Active)
	r.UptimeSettings.Schedule.Tue.AllDay = types.BoolValue(resp.UptimeSettings.Schedule.Tue.AllDay)
	r.UptimeSettings.Schedule.Tue.Range.From = types.StringValue(resp.UptimeSettings.Schedule.Tue.Range.From)
	r.UptimeSettings.Schedule.Tue.Range.To = types.StringValue(resp.UptimeSettings.Schedule.Tue.Range.To)
	r.UptimeSettings.Schedule.Wed.Active = types.BoolValue(resp.UptimeSettings.Schedule.Wed.Active)
	r.UptimeSettings.Schedule.Wed.AllDay = types.BoolValue(resp.UptimeSettings.Schedule.Wed.AllDay)
	r.UptimeSettings.Schedule.Wed.Range.From = types.StringValue(resp.UptimeSettings.Schedule.Wed.Range.From)
	r.UptimeSettings.Schedule.Wed.Range.To = types.StringValue(resp.UptimeSettings.Schedule.Wed.Range.To)
	r.Version = types.StringValue(resp.Version)
}
